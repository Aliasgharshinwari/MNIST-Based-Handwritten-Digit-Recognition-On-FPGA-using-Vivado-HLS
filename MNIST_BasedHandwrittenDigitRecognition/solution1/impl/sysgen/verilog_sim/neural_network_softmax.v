// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module neural_network_softmax (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY,
        m_axi_output_r_AWADDR,
        m_axi_output_r_AWID,
        m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID,
        m_axi_output_r_WREADY,
        m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST,
        m_axi_output_r_WID,
        m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY,
        m_axi_output_r_ARADDR,
        m_axi_output_r_ARID,
        m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID,
        m_axi_output_r_RREADY,
        m_axi_output_r_RDATA,
        m_axi_output_r_RLAST,
        m_axi_output_r_RID,
        m_axi_output_r_RUSER,
        m_axi_output_r_RRESP,
        m_axi_output_r_BVALID,
        m_axi_output_r_BREADY,
        m_axi_output_r_BRESP,
        m_axi_output_r_BID,
        m_axi_output_r_BUSER,
        output3
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 7'b0000000;
parameter    ap_ST_st2_fsm_1 = 7'b1;
parameter    ap_ST_st3_fsm_2 = 7'b10;
parameter    ap_ST_st4_fsm_3 = 7'b11;
parameter    ap_ST_st5_fsm_4 = 7'b100;
parameter    ap_ST_st6_fsm_5 = 7'b101;
parameter    ap_ST_st7_fsm_6 = 7'b110;
parameter    ap_ST_st8_fsm_7 = 7'b111;
parameter    ap_ST_st9_fsm_8 = 7'b1000;
parameter    ap_ST_st10_fsm_9 = 7'b1001;
parameter    ap_ST_st11_fsm_10 = 7'b1010;
parameter    ap_ST_st12_fsm_11 = 7'b1011;
parameter    ap_ST_st13_fsm_12 = 7'b1100;
parameter    ap_ST_st14_fsm_13 = 7'b1101;
parameter    ap_ST_st15_fsm_14 = 7'b1110;
parameter    ap_ST_st16_fsm_15 = 7'b1111;
parameter    ap_ST_st17_fsm_16 = 7'b10000;
parameter    ap_ST_st18_fsm_17 = 7'b10001;
parameter    ap_ST_st19_fsm_18 = 7'b10010;
parameter    ap_ST_st20_fsm_19 = 7'b10011;
parameter    ap_ST_st21_fsm_20 = 7'b10100;
parameter    ap_ST_st22_fsm_21 = 7'b10101;
parameter    ap_ST_st23_fsm_22 = 7'b10110;
parameter    ap_ST_st24_fsm_23 = 7'b10111;
parameter    ap_ST_st25_fsm_24 = 7'b11000;
parameter    ap_ST_st26_fsm_25 = 7'b11001;
parameter    ap_ST_st27_fsm_26 = 7'b11010;
parameter    ap_ST_st28_fsm_27 = 7'b11011;
parameter    ap_ST_st29_fsm_28 = 7'b11100;
parameter    ap_ST_st30_fsm_29 = 7'b11101;
parameter    ap_ST_st31_fsm_30 = 7'b11110;
parameter    ap_ST_st32_fsm_31 = 7'b11111;
parameter    ap_ST_st33_fsm_32 = 7'b100000;
parameter    ap_ST_st34_fsm_33 = 7'b100001;
parameter    ap_ST_st35_fsm_34 = 7'b100010;
parameter    ap_ST_st36_fsm_35 = 7'b100011;
parameter    ap_ST_st37_fsm_36 = 7'b100100;
parameter    ap_ST_st38_fsm_37 = 7'b100101;
parameter    ap_ST_st39_fsm_38 = 7'b100110;
parameter    ap_ST_st40_fsm_39 = 7'b100111;
parameter    ap_ST_st41_fsm_40 = 7'b101000;
parameter    ap_ST_st42_fsm_41 = 7'b101001;
parameter    ap_ST_st43_fsm_42 = 7'b101010;
parameter    ap_ST_st44_fsm_43 = 7'b101011;
parameter    ap_ST_st45_fsm_44 = 7'b101100;
parameter    ap_ST_st46_fsm_45 = 7'b101101;
parameter    ap_ST_st47_fsm_46 = 7'b101110;
parameter    ap_ST_st48_fsm_47 = 7'b101111;
parameter    ap_ST_st49_fsm_48 = 7'b110000;
parameter    ap_ST_st50_fsm_49 = 7'b110001;
parameter    ap_ST_st51_fsm_50 = 7'b110010;
parameter    ap_ST_st52_fsm_51 = 7'b110011;
parameter    ap_ST_st53_fsm_52 = 7'b110100;
parameter    ap_ST_st54_fsm_53 = 7'b110101;
parameter    ap_ST_st55_fsm_54 = 7'b110110;
parameter    ap_ST_st56_fsm_55 = 7'b110111;
parameter    ap_ST_st57_fsm_56 = 7'b111000;
parameter    ap_ST_st58_fsm_57 = 7'b111001;
parameter    ap_ST_st59_fsm_58 = 7'b111010;
parameter    ap_ST_st60_fsm_59 = 7'b111011;
parameter    ap_ST_st61_fsm_60 = 7'b111100;
parameter    ap_ST_st62_fsm_61 = 7'b111101;
parameter    ap_ST_st63_fsm_62 = 7'b111110;
parameter    ap_ST_st64_fsm_63 = 7'b111111;
parameter    ap_ST_st65_fsm_64 = 7'b1000000;
parameter    ap_ST_st66_fsm_65 = 7'b1000001;
parameter    ap_ST_st67_fsm_66 = 7'b1000010;
parameter    ap_ST_st68_fsm_67 = 7'b1000011;
parameter    ap_ST_st69_fsm_68 = 7'b1000100;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv32_3F800000 = 32'b111111100000000000000000000000;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_F = 4'b1111;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv5_2 = 5'b10;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output   m_axi_output_r_AWVALID;
input   m_axi_output_r_AWREADY;
output  [31:0] m_axi_output_r_AWADDR;
output  [0:0] m_axi_output_r_AWID;
output  [31:0] m_axi_output_r_AWLEN;
output  [2:0] m_axi_output_r_AWSIZE;
output  [1:0] m_axi_output_r_AWBURST;
output  [1:0] m_axi_output_r_AWLOCK;
output  [3:0] m_axi_output_r_AWCACHE;
output  [2:0] m_axi_output_r_AWPROT;
output  [3:0] m_axi_output_r_AWQOS;
output  [3:0] m_axi_output_r_AWREGION;
output  [0:0] m_axi_output_r_AWUSER;
output   m_axi_output_r_WVALID;
input   m_axi_output_r_WREADY;
output  [31:0] m_axi_output_r_WDATA;
output  [3:0] m_axi_output_r_WSTRB;
output   m_axi_output_r_WLAST;
output  [0:0] m_axi_output_r_WID;
output  [0:0] m_axi_output_r_WUSER;
output   m_axi_output_r_ARVALID;
input   m_axi_output_r_ARREADY;
output  [31:0] m_axi_output_r_ARADDR;
output  [0:0] m_axi_output_r_ARID;
output  [31:0] m_axi_output_r_ARLEN;
output  [2:0] m_axi_output_r_ARSIZE;
output  [1:0] m_axi_output_r_ARBURST;
output  [1:0] m_axi_output_r_ARLOCK;
output  [3:0] m_axi_output_r_ARCACHE;
output  [2:0] m_axi_output_r_ARPROT;
output  [3:0] m_axi_output_r_ARQOS;
output  [3:0] m_axi_output_r_ARREGION;
output  [0:0] m_axi_output_r_ARUSER;
input   m_axi_output_r_RVALID;
output   m_axi_output_r_RREADY;
input  [31:0] m_axi_output_r_RDATA;
input   m_axi_output_r_RLAST;
input  [0:0] m_axi_output_r_RID;
input  [0:0] m_axi_output_r_RUSER;
input  [1:0] m_axi_output_r_RRESP;
input   m_axi_output_r_BVALID;
output   m_axi_output_r_BREADY;
input  [1:0] m_axi_output_r_BRESP;
input  [0:0] m_axi_output_r_BID;
input  [0:0] m_axi_output_r_BUSER;
input  [29:0] output3;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] input_r_address0;
reg input_r_ce0;
reg m_axi_output_r_AWVALID;
reg[31:0] m_axi_output_r_AWADDR;
reg m_axi_output_r_WVALID;
reg[31:0] m_axi_output_r_WDATA;
reg m_axi_output_r_ARVALID;
reg m_axi_output_r_RREADY;
reg m_axi_output_r_BREADY;
reg   [6:0] ap_CS_fsm = 7'b0000000;
reg   [31:0] reg_220;
wire   [31:0] grp_fu_206_p2;
reg   [31:0] reg_226;
wire   [0:0] exitcond2_fu_232_p2;
wire   [3:0] i_1_fu_243_p2;
reg   [3:0] i_1_reg_366;
reg   [31:0] max_val_2_reg_371;
wire   [31:0] max_val_1_fu_249_p3;
wire   [3:0] i_3_fu_262_p2;
reg   [3:0] i_3_reg_385;
wire   [0:0] exitcond1_fu_256_p2;
wire   [32:0] tmp_6_cast_fu_273_p1;
reg   [32:0] tmp_6_cast_reg_395;
wire   [31:0] grp_fu_193_p2;
reg   [31:0] x_assign_reg_400;
wire   [3:0] i_4_fu_288_p2;
reg   [3:0] i_4_reg_413;
wire   [0:0] exitcond_i_fu_282_p2;
reg   [31:0] output_addr_1_reg_418;
wire   [31:0] grp_fu_211_p1;
reg   [31:0] tmp_s_reg_423;
wire   [31:0] grp_fu_201_p2;
reg   [31:0] term_reg_428;
wire   [3:0] i_2_fu_318_p2;
reg   [3:0] i_2_reg_447;
reg   [31:0] output_addr_reg_452;
wire   [0:0] exitcond_fu_312_p2;
reg   [31:0] output_addr_read_reg_458;
reg   [3:0] i_reg_100;
reg   [31:0] max_val1_reg_111;
reg   [31:0] sum_reg_121;
reg   [3:0] i1_reg_133;
reg   [31:0] result_0_i_reg_145;
reg   [31:0] term_0_i_reg_158;
reg   [3:0] i_0_i_reg_170;
reg   [3:0] i2_reg_181;
wire   [63:0] tmp_fu_238_p1;
wire   [63:0] tmp_6_fu_268_p1;
wire   [63:0] sum1_cast_fu_302_p1;
wire   [63:0] sum4_cast_fu_337_p1;
reg    ap_reg_ioackin_m_axi_output_r_AWREADY = 1'b0;
reg    ap_sig_ioackin_m_axi_output_r_AWREADY;
reg    ap_sig_ioackin_m_axi_output_r_WREADY;
reg    ap_reg_ioackin_m_axi_output_r_WREADY = 1'b0;
reg    ap_reg_ioackin_m_axi_output_r_ARREADY = 1'b0;
reg    ap_sig_ioackin_m_axi_output_r_ARREADY;
reg   [31:0] grp_fu_193_p0;
reg   [31:0] grp_fu_193_p1;
wire   [31:0] grp_fu_201_p0;
wire   [31:0] grp_fu_201_p1;
reg   [31:0] grp_fu_206_p0;
reg   [31:0] grp_fu_206_p1;
wire   [31:0] grp_fu_211_p0;
wire   [31:0] grp_fu_214_p0;
wire   [31:0] grp_fu_214_p1;
wire   [0:0] grp_fu_214_p2;
wire   [32:0] sext_cast_fu_294_p1;
wire   [32:0] sum1_fu_297_p2;
wire   [32:0] sext3_cast_fu_328_p1;
wire   [32:0] tmp_8_cast_fu_324_p1;
wire   [32:0] sum4_fu_331_p2;
reg    neural_network_softmax_ap_rst;
reg   [1:0] grp_fu_193_opcode;
reg    grp_fu_193_ce;
wire    grp_fu_201_ce;
wire    grp_fu_206_ce;
wire    grp_fu_211_ce;
wire    grp_fu_214_ce;
wire   [4:0] grp_fu_214_opcode;
reg   [6:0] ap_NS_fsm;


neural_network_faddfsub_32ns_32ns_32_5_no_dsp #(
    .ID( 14 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
neural_network_faddfsub_32ns_32ns_32_5_no_dsp_U14(
    .clk( ap_clk ),
    .reset( neural_network_softmax_ap_rst ),
    .din0( grp_fu_193_p0 ),
    .din1( grp_fu_193_p1 ),
    .opcode( grp_fu_193_opcode ),
    .ce( grp_fu_193_ce ),
    .dout( grp_fu_193_p2 )
);

neural_network_fmul_32ns_32ns_32_7_max_dsp #(
    .ID( 15 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
neural_network_fmul_32ns_32ns_32_7_max_dsp_U15(
    .clk( ap_clk ),
    .reset( neural_network_softmax_ap_rst ),
    .din0( grp_fu_201_p0 ),
    .din1( grp_fu_201_p1 ),
    .ce( grp_fu_201_ce ),
    .dout( grp_fu_201_p2 )
);

neural_network_fdiv_32ns_32ns_32_12 #(
    .ID( 16 ),
    .NUM_STAGE( 12 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
neural_network_fdiv_32ns_32ns_32_12_U16(
    .clk( ap_clk ),
    .reset( neural_network_softmax_ap_rst ),
    .din0( grp_fu_206_p0 ),
    .din1( grp_fu_206_p1 ),
    .ce( grp_fu_206_ce ),
    .dout( grp_fu_206_p2 )
);

neural_network_sitofp_32ns_32_5 #(
    .ID( 17 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
neural_network_sitofp_32ns_32_5_U17(
    .clk( ap_clk ),
    .reset( neural_network_softmax_ap_rst ),
    .din0( grp_fu_211_p0 ),
    .ce( grp_fu_211_ce ),
    .dout( grp_fu_211_p1 )
);

neural_network_fcmp_32ns_32ns_1_3 #(
    .ID( 18 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
neural_network_fcmp_32ns_32ns_1_3_U18(
    .clk( ap_clk ),
    .reset( neural_network_softmax_ap_rst ),
    .din0( grp_fu_214_p0 ),
    .din1( grp_fu_214_p1 ),
    .ce( grp_fu_214_ce ),
    .opcode( grp_fu_214_opcode ),
    .dout( grp_fu_214_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_m_axi_output_r_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_axi_output_r_ARREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_axi_output_r_ARREADY <= ap_const_logic_0;
    end else begin
        if ((ap_ST_st48_fsm_47 == ap_CS_fsm)) begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_ARREADY)) begin
                ap_reg_ioackin_m_axi_output_r_ARREADY <= ap_const_logic_0;
            end else if ((ap_const_logic_1 == m_axi_output_r_ARREADY)) begin
                ap_reg_ioackin_m_axi_output_r_ARREADY <= ap_const_logic_1;
            end
        end
    end
end

/// ap_reg_ioackin_m_axi_output_r_AWREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_axi_output_r_AWREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_axi_output_r_AWREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st43_fsm_42 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_WREADY))) | (~((ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_WREADY)) & (ap_ST_st66_fsm_65 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_axi_output_r_AWREADY <= ap_const_logic_0;
        end else if ((((ap_const_logic_1 == m_axi_output_r_AWREADY) & (ap_ST_st43_fsm_42 == ap_CS_fsm)) | ((ap_const_logic_1 == m_axi_output_r_AWREADY) & (ap_ST_st66_fsm_65 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_axi_output_r_AWREADY <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ioackin_m_axi_output_r_WREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_axi_output_r_WREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_axi_output_r_WREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st43_fsm_42 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_WREADY))) | (~((ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_WREADY)) & (ap_ST_st66_fsm_65 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_axi_output_r_WREADY <= ap_const_logic_0;
        end else if ((((ap_ST_st43_fsm_42 == ap_CS_fsm) & (ap_const_logic_1 == m_axi_output_r_WREADY)) | ((ap_const_logic_1 == m_axi_output_r_WREADY) & (ap_ST_st66_fsm_65 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_axi_output_r_WREADY <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond2_fu_232_p2 == ap_const_lv1_0))) begin
        i1_reg_133 <= ap_const_lv4_0;
    end else if (((ap_ST_st46_fsm_45 == ap_CS_fsm) & ~(m_axi_output_r_BVALID == ap_const_logic_0))) begin
        i1_reg_133 <= i_3_reg_385;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st7_fsm_6 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_256_p2))) begin
        i2_reg_181 <= ap_const_lv4_0;
    end else if ((~(m_axi_output_r_BVALID == ap_const_logic_0) & (ap_ST_st69_fsm_68 == ap_CS_fsm))) begin
        i2_reg_181 <= i_2_reg_447;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st42_fsm_41 == ap_CS_fsm)) begin
        i_0_i_reg_170 <= i_4_reg_413;
    end else if ((ap_ST_st13_fsm_12 == ap_CS_fsm)) begin
        i_0_i_reg_170 <= ap_const_lv4_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        i_reg_100 <= i_1_reg_366;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        i_reg_100 <= ap_const_lv4_1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st6_fsm_5 == ap_CS_fsm)) begin
        max_val1_reg_111 <= max_val_1_fu_249_p3;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        max_val1_reg_111 <= input_r_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st42_fsm_41 == ap_CS_fsm)) begin
        result_0_i_reg_145 <= grp_fu_193_p2;
    end else if ((ap_ST_st13_fsm_12 == ap_CS_fsm)) begin
        result_0_i_reg_145 <= ap_const_lv32_3F800000;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond2_fu_232_p2 == ap_const_lv1_0))) begin
        sum_reg_121 <= ap_const_lv32_0;
    end else if (((ap_ST_st46_fsm_45 == ap_CS_fsm) & ~(m_axi_output_r_BVALID == ap_const_logic_0))) begin
        sum_reg_121 <= grp_fu_193_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st42_fsm_41 == ap_CS_fsm)) begin
        term_0_i_reg_158 <= term_reg_428;
    end else if ((ap_ST_st13_fsm_12 == ap_CS_fsm)) begin
        term_0_i_reg_158 <= ap_const_lv32_3F800000;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond2_fu_232_p2 == ap_const_lv1_0))) begin
        i_1_reg_366 <= i_1_fu_243_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st47_fsm_46 == ap_CS_fsm)) begin
        i_2_reg_447 <= i_2_fu_318_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        i_3_reg_385 <= i_3_fu_262_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st14_fsm_13 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_i_fu_282_p2))) begin
        i_4_reg_413 <= i_4_fu_288_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        max_val_2_reg_371 <= input_r_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_i_fu_282_p2))) begin
        output_addr_1_reg_418 <= sum1_cast_fu_302_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st53_fsm_52 == ap_CS_fsm) & ~(m_axi_output_r_RVALID == ap_const_logic_0))) begin
        output_addr_read_reg_458 <= m_axi_output_r_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st47_fsm_46 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_312_p2))) begin
        output_addr_reg_452 <= sum4_cast_fu_337_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) | (ap_ST_st8_fsm_7 == ap_CS_fsm))) begin
        reg_220 <= input_r_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st30_fsm_29 == ap_CS_fsm) | (ap_ST_st65_fsm_64 == ap_CS_fsm))) begin
        reg_226 <= grp_fu_206_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st37_fsm_36 == ap_CS_fsm)) begin
        term_reg_428 <= grp_fu_201_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st13_fsm_12 == ap_CS_fsm)) begin
        tmp_6_cast_reg_395[0] <= tmp_6_cast_fu_273_p1[0];
tmp_6_cast_reg_395[1] <= tmp_6_cast_fu_273_p1[1];
tmp_6_cast_reg_395[2] <= tmp_6_cast_fu_273_p1[2];
tmp_6_cast_reg_395[3] <= tmp_6_cast_fu_273_p1[3];
        x_assign_reg_400 <= grp_fu_193_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st18_fsm_17 == ap_CS_fsm)) begin
        tmp_s_reg_423 <= grp_fu_211_p1;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond_fu_312_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st47_fsm_46 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_312_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond_fu_312_p2)
begin
    if (((ap_ST_st47_fsm_46 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_312_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_m_axi_output_r_ARREADY assign process. ///
always @ (m_axi_output_r_ARREADY or ap_reg_ioackin_m_axi_output_r_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_ARREADY)) begin
        ap_sig_ioackin_m_axi_output_r_ARREADY = m_axi_output_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_r_ARREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_m_axi_output_r_AWREADY assign process. ///
always @ (m_axi_output_r_AWREADY or ap_reg_ioackin_m_axi_output_r_AWREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_AWREADY)) begin
        ap_sig_ioackin_m_axi_output_r_AWREADY = m_axi_output_r_AWREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_r_AWREADY = ap_const_logic_1;
    end
end

/// ap_sig_ioackin_m_axi_output_r_WREADY assign process. ///
always @ (m_axi_output_r_WREADY or ap_reg_ioackin_m_axi_output_r_WREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_WREADY)) begin
        ap_sig_ioackin_m_axi_output_r_WREADY = m_axi_output_r_WREADY;
    end else begin
        ap_sig_ioackin_m_axi_output_r_WREADY = ap_const_logic_1;
    end
end

/// grp_fu_193_ce assign process. ///
always @ (ap_CS_fsm or m_axi_output_r_BVALID or exitcond_i_fu_282_p2 or ap_sig_ioackin_m_axi_output_r_AWREADY or ap_sig_ioackin_m_axi_output_r_WREADY)
begin
    if (((ap_ST_st13_fsm_12 == ap_CS_fsm) | ((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_i_fu_282_p2)) | (ap_ST_st42_fsm_41 == ap_CS_fsm) | ((ap_ST_st46_fsm_45 == ap_CS_fsm) & ~(m_axi_output_r_BVALID == ap_const_logic_0)) | ((ap_ST_st43_fsm_42 == ap_CS_fsm) & ~((ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_WREADY))) | (ap_ST_st9_fsm_8 == ap_CS_fsm) | (ap_ST_st38_fsm_37 == ap_CS_fsm) | (ap_ST_st10_fsm_9 == ap_CS_fsm) | (ap_ST_st11_fsm_10 == ap_CS_fsm) | (ap_ST_st12_fsm_11 == ap_CS_fsm) | (ap_ST_st44_fsm_43 == ap_CS_fsm) | (ap_ST_st45_fsm_44 == ap_CS_fsm) | (ap_ST_st39_fsm_38 == ap_CS_fsm) | (ap_ST_st40_fsm_39 == ap_CS_fsm) | (ap_ST_st41_fsm_40 == ap_CS_fsm))) begin
        grp_fu_193_ce = ap_const_logic_1;
    end else begin
        grp_fu_193_ce = ap_const_logic_0;
    end
end

/// grp_fu_193_opcode assign process. ///
always @ (ap_CS_fsm or exitcond_i_fu_282_p2)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        grp_fu_193_opcode = ap_const_lv2_1;
    end else if ((((ap_ST_st14_fsm_13 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_i_fu_282_p2)) | (ap_ST_st38_fsm_37 == ap_CS_fsm))) begin
        grp_fu_193_opcode = ap_const_lv2_0;
    end else begin
        grp_fu_193_opcode = 'bx;
    end
end

/// grp_fu_193_p0 assign process. ///
always @ (ap_CS_fsm or reg_220 or sum_reg_121 or result_0_i_reg_145)
begin
    if ((ap_ST_st38_fsm_37 == ap_CS_fsm)) begin
        grp_fu_193_p0 = result_0_i_reg_145;
    end else if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        grp_fu_193_p0 = sum_reg_121;
    end else if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        grp_fu_193_p0 = reg_220;
    end else begin
        grp_fu_193_p0 = 'bx;
    end
end

/// grp_fu_193_p1 assign process. ///
always @ (ap_CS_fsm or term_reg_428 or max_val1_reg_111 or result_0_i_reg_145)
begin
    if ((ap_ST_st38_fsm_37 == ap_CS_fsm)) begin
        grp_fu_193_p1 = term_reg_428;
    end else if ((ap_ST_st14_fsm_13 == ap_CS_fsm)) begin
        grp_fu_193_p1 = result_0_i_reg_145;
    end else if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        grp_fu_193_p1 = max_val1_reg_111;
    end else begin
        grp_fu_193_p1 = 'bx;
    end
end

/// grp_fu_206_p0 assign process. ///
always @ (ap_CS_fsm or x_assign_reg_400 or output_addr_read_reg_458)
begin
    if ((ap_ST_st54_fsm_53 == ap_CS_fsm)) begin
        grp_fu_206_p0 = output_addr_read_reg_458;
    end else if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        grp_fu_206_p0 = x_assign_reg_400;
    end else begin
        grp_fu_206_p0 = 'bx;
    end
end

/// grp_fu_206_p1 assign process. ///
always @ (ap_CS_fsm or tmp_s_reg_423 or sum_reg_121)
begin
    if ((ap_ST_st54_fsm_53 == ap_CS_fsm)) begin
        grp_fu_206_p1 = sum_reg_121;
    end else if ((ap_ST_st19_fsm_18 == ap_CS_fsm)) begin
        grp_fu_206_p1 = tmp_s_reg_423;
    end else begin
        grp_fu_206_p1 = 'bx;
    end
end

/// input_r_address0 assign process. ///
always @ (ap_CS_fsm or tmp_fu_238_p1 or tmp_6_fu_268_p1)
begin
    if ((ap_ST_st7_fsm_6 == ap_CS_fsm)) begin
        input_r_address0 = tmp_6_fu_268_p1;
    end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        input_r_address0 = tmp_fu_238_p1;
    end else if ((ap_ST_st1_fsm_0 == ap_CS_fsm)) begin
        input_r_address0 = ap_const_lv64_0;
    end else begin
        input_r_address0 = 'bx;
    end
end

/// input_r_ce0 assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0)) | (ap_ST_st3_fsm_2 == ap_CS_fsm) | (ap_ST_st7_fsm_6 == ap_CS_fsm))) begin
        input_r_ce0 = ap_const_logic_1;
    end else begin
        input_r_ce0 = ap_const_logic_0;
    end
end

/// m_axi_output_r_ARVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ioackin_m_axi_output_r_ARREADY)
begin
    if (((ap_ST_st48_fsm_47 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_ARREADY))) begin
        m_axi_output_r_ARVALID = ap_const_logic_1;
    end else begin
        m_axi_output_r_ARVALID = ap_const_logic_0;
    end
end

/// m_axi_output_r_AWADDR assign process. ///
always @ (ap_CS_fsm or output_addr_1_reg_418 or output_addr_reg_452 or ap_reg_ioackin_m_axi_output_r_AWREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_AWREADY)) begin
        if ((ap_ST_st66_fsm_65 == ap_CS_fsm)) begin
            m_axi_output_r_AWADDR = output_addr_reg_452;
        end else if ((ap_ST_st43_fsm_42 == ap_CS_fsm)) begin
            m_axi_output_r_AWADDR = output_addr_1_reg_418;
        end else begin
            m_axi_output_r_AWADDR = 'bx;
        end
    end else begin
        m_axi_output_r_AWADDR = 'bx;
    end
end

/// m_axi_output_r_AWVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ioackin_m_axi_output_r_AWREADY)
begin
    if ((((ap_ST_st43_fsm_42 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_AWREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_AWREADY) & (ap_ST_st66_fsm_65 == ap_CS_fsm)))) begin
        m_axi_output_r_AWVALID = ap_const_logic_1;
    end else begin
        m_axi_output_r_AWVALID = ap_const_logic_0;
    end
end

/// m_axi_output_r_BREADY assign process. ///
always @ (ap_CS_fsm or m_axi_output_r_BVALID)
begin
    if ((((ap_ST_st46_fsm_45 == ap_CS_fsm) & ~(m_axi_output_r_BVALID == ap_const_logic_0)) | (~(m_axi_output_r_BVALID == ap_const_logic_0) & (ap_ST_st69_fsm_68 == ap_CS_fsm)))) begin
        m_axi_output_r_BREADY = ap_const_logic_1;
    end else begin
        m_axi_output_r_BREADY = ap_const_logic_0;
    end
end

/// m_axi_output_r_RREADY assign process. ///
always @ (ap_CS_fsm or m_axi_output_r_RVALID)
begin
    if (((ap_ST_st53_fsm_52 == ap_CS_fsm) & ~(m_axi_output_r_RVALID == ap_const_logic_0))) begin
        m_axi_output_r_RREADY = ap_const_logic_1;
    end else begin
        m_axi_output_r_RREADY = ap_const_logic_0;
    end
end

/// m_axi_output_r_WDATA assign process. ///
always @ (ap_CS_fsm or reg_226 or result_0_i_reg_145 or ap_reg_ioackin_m_axi_output_r_WREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_WREADY)) begin
        if ((ap_ST_st66_fsm_65 == ap_CS_fsm)) begin
            m_axi_output_r_WDATA = reg_226;
        end else if ((ap_ST_st43_fsm_42 == ap_CS_fsm)) begin
            m_axi_output_r_WDATA = result_0_i_reg_145;
        end else begin
            m_axi_output_r_WDATA = 'bx;
        end
    end else begin
        m_axi_output_r_WDATA = 'bx;
    end
end

/// m_axi_output_r_WVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ioackin_m_axi_output_r_WREADY)
begin
    if ((((ap_ST_st43_fsm_42 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_WREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_m_axi_output_r_WREADY) & (ap_ST_st66_fsm_65 == ap_CS_fsm)))) begin
        m_axi_output_r_WVALID = ap_const_logic_1;
    end else begin
        m_axi_output_r_WVALID = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or m_axi_output_r_RVALID or m_axi_output_r_BVALID or exitcond2_fu_232_p2 or exitcond1_fu_256_p2 or exitcond_i_fu_282_p2 or exitcond_fu_312_p2 or ap_sig_ioackin_m_axi_output_r_AWREADY or ap_sig_ioackin_m_axi_output_r_WREADY or ap_sig_ioackin_m_axi_output_r_ARREADY)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(exitcond2_fu_232_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st7_fsm_6 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_256_p2)) begin
                ap_NS_fsm = ap_ST_st47_fsm_46;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st8_fsm_7 : 
        begin
            ap_NS_fsm = ap_ST_st9_fsm_8;
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : 
        begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_i_fu_282_p2)) begin
                ap_NS_fsm = ap_ST_st43_fsm_42;
            end else begin
                ap_NS_fsm = ap_ST_st15_fsm_14;
            end
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            ap_NS_fsm = ap_ST_st17_fsm_16;
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st30_fsm_29;
        end
        ap_ST_st30_fsm_29 : 
        begin
            ap_NS_fsm = ap_ST_st31_fsm_30;
        end
        ap_ST_st31_fsm_30 : 
        begin
            ap_NS_fsm = ap_ST_st32_fsm_31;
        end
        ap_ST_st32_fsm_31 : 
        begin
            ap_NS_fsm = ap_ST_st33_fsm_32;
        end
        ap_ST_st33_fsm_32 : 
        begin
            ap_NS_fsm = ap_ST_st34_fsm_33;
        end
        ap_ST_st34_fsm_33 : 
        begin
            ap_NS_fsm = ap_ST_st35_fsm_34;
        end
        ap_ST_st35_fsm_34 : 
        begin
            ap_NS_fsm = ap_ST_st36_fsm_35;
        end
        ap_ST_st36_fsm_35 : 
        begin
            ap_NS_fsm = ap_ST_st37_fsm_36;
        end
        ap_ST_st37_fsm_36 : 
        begin
            ap_NS_fsm = ap_ST_st38_fsm_37;
        end
        ap_ST_st38_fsm_37 : 
        begin
            ap_NS_fsm = ap_ST_st39_fsm_38;
        end
        ap_ST_st39_fsm_38 : 
        begin
            ap_NS_fsm = ap_ST_st40_fsm_39;
        end
        ap_ST_st40_fsm_39 : 
        begin
            ap_NS_fsm = ap_ST_st41_fsm_40;
        end
        ap_ST_st41_fsm_40 : 
        begin
            ap_NS_fsm = ap_ST_st42_fsm_41;
        end
        ap_ST_st42_fsm_41 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st43_fsm_42 : 
        begin
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_WREADY))) begin
                ap_NS_fsm = ap_ST_st44_fsm_43;
            end else begin
                ap_NS_fsm = ap_ST_st43_fsm_42;
            end
        end
        ap_ST_st44_fsm_43 : 
        begin
            ap_NS_fsm = ap_ST_st45_fsm_44;
        end
        ap_ST_st45_fsm_44 : 
        begin
            ap_NS_fsm = ap_ST_st46_fsm_45;
        end
        ap_ST_st46_fsm_45 : 
        begin
            if (~(m_axi_output_r_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st7_fsm_6;
            end else begin
                ap_NS_fsm = ap_ST_st46_fsm_45;
            end
        end
        ap_ST_st47_fsm_46 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_312_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st48_fsm_47;
            end
        end
        ap_ST_st48_fsm_47 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_st49_fsm_48;
            end else begin
                ap_NS_fsm = ap_ST_st48_fsm_47;
            end
        end
        ap_ST_st49_fsm_48 : 
        begin
            ap_NS_fsm = ap_ST_st50_fsm_49;
        end
        ap_ST_st50_fsm_49 : 
        begin
            ap_NS_fsm = ap_ST_st51_fsm_50;
        end
        ap_ST_st51_fsm_50 : 
        begin
            ap_NS_fsm = ap_ST_st52_fsm_51;
        end
        ap_ST_st52_fsm_51 : 
        begin
            ap_NS_fsm = ap_ST_st53_fsm_52;
        end
        ap_ST_st53_fsm_52 : 
        begin
            if (~(m_axi_output_r_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st54_fsm_53;
            end else begin
                ap_NS_fsm = ap_ST_st53_fsm_52;
            end
        end
        ap_ST_st54_fsm_53 : 
        begin
            ap_NS_fsm = ap_ST_st55_fsm_54;
        end
        ap_ST_st55_fsm_54 : 
        begin
            ap_NS_fsm = ap_ST_st56_fsm_55;
        end
        ap_ST_st56_fsm_55 : 
        begin
            ap_NS_fsm = ap_ST_st57_fsm_56;
        end
        ap_ST_st57_fsm_56 : 
        begin
            ap_NS_fsm = ap_ST_st58_fsm_57;
        end
        ap_ST_st58_fsm_57 : 
        begin
            ap_NS_fsm = ap_ST_st59_fsm_58;
        end
        ap_ST_st59_fsm_58 : 
        begin
            ap_NS_fsm = ap_ST_st60_fsm_59;
        end
        ap_ST_st60_fsm_59 : 
        begin
            ap_NS_fsm = ap_ST_st61_fsm_60;
        end
        ap_ST_st61_fsm_60 : 
        begin
            ap_NS_fsm = ap_ST_st62_fsm_61;
        end
        ap_ST_st62_fsm_61 : 
        begin
            ap_NS_fsm = ap_ST_st63_fsm_62;
        end
        ap_ST_st63_fsm_62 : 
        begin
            ap_NS_fsm = ap_ST_st64_fsm_63;
        end
        ap_ST_st64_fsm_63 : 
        begin
            ap_NS_fsm = ap_ST_st65_fsm_64;
        end
        ap_ST_st65_fsm_64 : 
        begin
            ap_NS_fsm = ap_ST_st66_fsm_65;
        end
        ap_ST_st66_fsm_65 : 
        begin
            if (~((ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_AWREADY) | (ap_const_logic_0 == ap_sig_ioackin_m_axi_output_r_WREADY))) begin
                ap_NS_fsm = ap_ST_st67_fsm_66;
            end else begin
                ap_NS_fsm = ap_ST_st66_fsm_65;
            end
        end
        ap_ST_st67_fsm_66 : 
        begin
            ap_NS_fsm = ap_ST_st68_fsm_67;
        end
        ap_ST_st68_fsm_67 : 
        begin
            ap_NS_fsm = ap_ST_st69_fsm_68;
        end
        ap_ST_st69_fsm_68 : 
        begin
            if (~(m_axi_output_r_BVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st47_fsm_46;
            end else begin
                ap_NS_fsm = ap_ST_st69_fsm_68;
            end
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign exitcond1_fu_256_p2 = (i1_reg_133 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond2_fu_232_p2 = (i_reg_100 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond_fu_312_p2 = (i2_reg_181 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond_i_fu_282_p2 = (i_0_i_reg_170 == ap_const_lv4_A? 1'b1: 1'b0);
assign grp_fu_201_ce = ap_const_logic_1;
assign grp_fu_201_p0 = term_0_i_reg_158;
assign grp_fu_201_p1 = reg_226;
assign grp_fu_206_ce = ap_const_logic_1;
assign grp_fu_211_ce = ap_const_logic_1;
assign grp_fu_211_p0 = $unsigned(i_0_i_reg_170);
assign grp_fu_214_ce = ap_const_logic_1;
assign grp_fu_214_opcode = ap_const_lv5_2;
assign grp_fu_214_p0 = input_r_q0;
assign grp_fu_214_p1 = max_val1_reg_111;
assign i_1_fu_243_p2 = (i_reg_100 + ap_const_lv4_1);
assign i_2_fu_318_p2 = (i2_reg_181 + ap_const_lv4_1);
assign i_3_fu_262_p2 = (i1_reg_133 + ap_const_lv4_1);
assign i_4_fu_288_p2 = (i_0_i_reg_170 + ap_const_lv4_1);
assign m_axi_output_r_ARADDR = output_addr_reg_452;
assign m_axi_output_r_ARBURST = ap_const_lv2_0;
assign m_axi_output_r_ARCACHE = ap_const_lv4_0;
assign m_axi_output_r_ARID = ap_const_lv1_0;
assign m_axi_output_r_ARLEN = ap_const_lv32_1;
assign m_axi_output_r_ARLOCK = ap_const_lv2_0;
assign m_axi_output_r_ARPROT = ap_const_lv3_0;
assign m_axi_output_r_ARQOS = ap_const_lv4_0;
assign m_axi_output_r_ARREGION = ap_const_lv4_0;
assign m_axi_output_r_ARSIZE = ap_const_lv3_0;
assign m_axi_output_r_ARUSER = ap_const_lv1_0;
assign m_axi_output_r_AWBURST = ap_const_lv2_0;
assign m_axi_output_r_AWCACHE = ap_const_lv4_0;
assign m_axi_output_r_AWID = ap_const_lv1_0;
assign m_axi_output_r_AWLEN = ap_const_lv32_1;
assign m_axi_output_r_AWLOCK = ap_const_lv2_0;
assign m_axi_output_r_AWPROT = ap_const_lv3_0;
assign m_axi_output_r_AWQOS = ap_const_lv4_0;
assign m_axi_output_r_AWREGION = ap_const_lv4_0;
assign m_axi_output_r_AWSIZE = ap_const_lv3_0;
assign m_axi_output_r_AWUSER = ap_const_lv1_0;
assign m_axi_output_r_WID = ap_const_lv1_0;
assign m_axi_output_r_WLAST = ap_const_logic_0;
assign m_axi_output_r_WSTRB = ap_const_lv4_F;
assign m_axi_output_r_WUSER = ap_const_lv1_0;
assign max_val_1_fu_249_p3 = ((grp_fu_214_p2)? max_val_2_reg_371: max_val1_reg_111);

/// neural_network_softmax_ap_rst assign process. ///
always @ (ap_rst_n)
begin
    neural_network_softmax_ap_rst = ~ap_rst_n;
end
assign sext3_cast_fu_328_p1 = $unsigned(output3);
assign sext_cast_fu_294_p1 = $unsigned(output3);
assign sum1_cast_fu_302_p1 = $unsigned(sum1_fu_297_p2);
assign sum1_fu_297_p2 = (sext_cast_fu_294_p1 + tmp_6_cast_reg_395);
assign sum4_cast_fu_337_p1 = $unsigned(sum4_fu_331_p2);
assign sum4_fu_331_p2 = (sext3_cast_fu_328_p1 + tmp_8_cast_fu_324_p1);
assign tmp_6_cast_fu_273_p1 = $unsigned(i1_reg_133);
assign tmp_6_fu_268_p1 = $unsigned(i1_reg_133);
assign tmp_8_cast_fu_324_p1 = $unsigned(i2_reg_181);
assign tmp_fu_238_p1 = $unsigned(i_reg_100);
always @ (posedge ap_clk)
begin
    tmp_6_cast_reg_395[32:4] <= 29'b00000000000000000000000000000;
end



endmodule //neural_network_softmax

