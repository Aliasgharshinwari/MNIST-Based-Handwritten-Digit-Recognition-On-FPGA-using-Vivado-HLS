// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module neural_network_dense_1 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        input1,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        dense_1_weights5,
        dense_1_bias7
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b00000;
parameter    ap_ST_st2_fsm_1 = 5'b1;
parameter    ap_ST_st3_fsm_2 = 5'b10;
parameter    ap_ST_st4_fsm_3 = 5'b11;
parameter    ap_ST_st5_fsm_4 = 5'b100;
parameter    ap_ST_st6_fsm_5 = 5'b101;
parameter    ap_ST_st7_fsm_6 = 5'b110;
parameter    ap_ST_st8_fsm_7 = 5'b111;
parameter    ap_ST_st9_fsm_8 = 5'b1000;
parameter    ap_ST_st10_fsm_9 = 5'b1001;
parameter    ap_ST_st11_fsm_10 = 5'b1010;
parameter    ap_ST_st12_fsm_11 = 5'b1011;
parameter    ap_ST_st13_fsm_12 = 5'b1100;
parameter    ap_ST_st14_fsm_13 = 5'b1101;
parameter    ap_ST_st15_fsm_14 = 5'b1110;
parameter    ap_ST_st16_fsm_15 = 5'b1111;
parameter    ap_ST_st17_fsm_16 = 5'b10000;
parameter    ap_ST_st18_fsm_17 = 5'b10001;
parameter    ap_ST_st19_fsm_18 = 5'b10010;
parameter    ap_ST_st20_fsm_19 = 5'b10011;
parameter    ap_ST_st21_fsm_20 = 5'b10100;
parameter    ap_ST_st22_fsm_21 = 5'b10101;
parameter    ap_ST_st23_fsm_22 = 5'b10110;
parameter    ap_ST_st24_fsm_23 = 5'b10111;
parameter    ap_ST_st25_fsm_24 = 5'b11000;
parameter    ap_ST_st26_fsm_25 = 5'b11001;
parameter    ap_ST_st27_fsm_26 = 5'b11010;
parameter    ap_ST_st28_fsm_27 = 5'b11011;
parameter    ap_ST_st29_fsm_28 = 5'b11100;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv7_0 = 7'b0000000;
parameter    ap_const_lv10_310 = 10'b1100010000;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [31:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [31:0] m_axi_input_r_WDATA;
output  [3:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [31:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [31:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
input  [29:0] input1;
output  [6:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
input  [29:0] dense_1_weights5;
input  [29:0] dense_1_bias7;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_r_ARVALID;
reg[31:0] m_axi_input_r_ARADDR;
reg m_axi_input_r_RREADY;
reg output_r_ce0;
reg output_r_we0;
reg   [4:0] ap_CS_fsm = 5'b00000;
wire   [7:0] i_1_fu_146_p2;
reg   [7:0] i_1_reg_280;
reg   [31:0] bias_addr_reg_285;
wire   [0:0] exitcond1_fu_140_p2;
reg   [31:0] sum_reg_291;
wire   [63:0] tmp_fu_175_p1;
reg   [63:0] tmp_reg_296;
wire   [14:0] tmp_1_cast_fu_191_p1;
reg   [14:0] tmp_1_cast_reg_301;
wire   [9:0] j_1_fu_201_p2;
reg   [9:0] j_1_reg_309;
reg   [31:0] bias_addr_2_reg_314;
wire   [0:0] exitcond_fu_195_p2;
reg   [31:0] bias_addr_3_reg_320;
reg   [31:0] bias_addr_2_read_reg_326;
reg   [31:0] bias_addr_3_read_reg_331;
wire   [31:0] grp_fu_136_p2;
reg   [31:0] tmp_2_reg_336;
wire   [31:0] grp_fu_131_p2;
reg   [7:0] i_reg_96;
reg   [31:0] sum2_reg_108;
reg   [9:0] j_reg_119;
wire   [63:0] sum9_cast_fu_165_p1;
wire   [63:0] sum1_cast_fu_224_p1;
wire   [63:0] sum5_cast_fu_252_p1;
reg    ap_reg_ioackin_m_axi_input_r_ARREADY = 1'b0;
reg    ap_sig_ioackin_m_axi_input_r_ARREADY;
wire   [31:0] grp_fu_131_p0;
wire   [31:0] grp_fu_131_p1;
wire   [31:0] grp_fu_136_p0;
wire   [31:0] grp_fu_136_p1;
wire   [32:0] sext8_cast_fu_156_p1;
wire   [32:0] tmp_cast_fu_152_p1;
wire   [32:0] sum9_fu_159_p2;
wire   [6:0] tmp_4_fu_179_p1;
wire   [13:0] tmp_1_fu_183_p3;
wire   [32:0] sext_cast_fu_215_p1;
wire   [32:0] tmp_cast1_fu_207_p1;
wire   [32:0] sum1_fu_218_p2;
wire   [14:0] tmp_cast_41_fu_211_p1;
wire   [14:0] tmp_3_fu_234_p2;
wire   [32:0] sext4_cast_fu_243_p1;
wire   [32:0] tmp_3_cast_cast_fu_239_p1;
wire   [32:0] sum5_fu_246_p2;
reg    neural_network_dense_1_ap_rst;
wire    grp_fu_131_ce;
wire    grp_fu_136_ce;
reg   [4:0] ap_NS_fsm;


neural_network_fadd_32ns_32ns_32_5_no_dsp #(
    .ID( 0 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
neural_network_fadd_32ns_32ns_32_5_no_dsp_U0(
    .clk( ap_clk ),
    .reset( neural_network_dense_1_ap_rst ),
    .din0( grp_fu_131_p0 ),
    .din1( grp_fu_131_p1 ),
    .ce( grp_fu_131_ce ),
    .dout( grp_fu_131_p2 )
);

neural_network_fmul_32ns_32ns_32_7_max_dsp #(
    .ID( 1 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
neural_network_fmul_32ns_32ns_32_7_max_dsp_U1(
    .clk( ap_clk ),
    .reset( neural_network_dense_1_ap_rst ),
    .din0( grp_fu_136_p0 ),
    .din1( grp_fu_136_p1 ),
    .ce( grp_fu_136_ce ),
    .dout( grp_fu_136_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_m_axi_input_r_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_axi_input_r_ARREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) | (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_input_r_ARREADY) & (ap_ST_st11_fsm_10 == ap_CS_fsm)) | (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_input_r_ARREADY) & (ap_ST_st12_fsm_11 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_0;
        end else if ((((ap_const_logic_1 == m_axi_input_r_ARREADY) & (ap_ST_st3_fsm_2 == ap_CS_fsm)) | ((ap_const_logic_1 == m_axi_input_r_ARREADY) & (ap_ST_st11_fsm_10 == ap_CS_fsm)) | ((ap_const_logic_1 == m_axi_input_r_ARREADY) & (ap_ST_st12_fsm_11 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_axi_input_r_ARREADY <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_195_p2))) begin
        i_reg_96 <= i_1_reg_280;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_96 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st29_fsm_28 == ap_CS_fsm)) begin
        j_reg_119 <= j_1_reg_309;
    end else if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        j_reg_119 <= ap_const_lv10_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st29_fsm_28 == ap_CS_fsm)) begin
        sum2_reg_108 <= grp_fu_131_p2;
    end else if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        sum2_reg_108 <= sum_reg_291;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(m_axi_input_r_RVALID == ap_const_logic_0) & (ap_ST_st16_fsm_15 == ap_CS_fsm))) begin
        bias_addr_2_read_reg_326 <= m_axi_input_r_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_195_p2))) begin
        bias_addr_2_reg_314 <= sum1_cast_fu_224_p1;
        bias_addr_3_reg_320 <= sum5_cast_fu_252_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(m_axi_input_r_RVALID == ap_const_logic_0) & (ap_ST_st17_fsm_16 == ap_CS_fsm))) begin
        bias_addr_3_read_reg_331 <= m_axi_input_r_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_140_p2))) begin
        bias_addr_reg_285 <= sum9_cast_fu_165_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        i_1_reg_280 <= i_1_fu_146_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st10_fsm_9 == ap_CS_fsm)) begin
        j_1_reg_309 <= j_1_fu_201_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(m_axi_input_r_RVALID == ap_const_logic_0))) begin
        sum_reg_291 <= m_axi_input_r_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        tmp_1_cast_reg_301[7] <= tmp_1_cast_fu_191_p1[7];
tmp_1_cast_reg_301[8] <= tmp_1_cast_fu_191_p1[8];
tmp_1_cast_reg_301[9] <= tmp_1_cast_fu_191_p1[9];
tmp_1_cast_reg_301[10] <= tmp_1_cast_fu_191_p1[10];
tmp_1_cast_reg_301[11] <= tmp_1_cast_fu_191_p1[11];
tmp_1_cast_reg_301[12] <= tmp_1_cast_fu_191_p1[12];
tmp_1_cast_reg_301[13] <= tmp_1_cast_fu_191_p1[13];
        tmp_reg_296[0] <= tmp_fu_175_p1[0];
tmp_reg_296[1] <= tmp_fu_175_p1[1];
tmp_reg_296[2] <= tmp_fu_175_p1[2];
tmp_reg_296[3] <= tmp_fu_175_p1[3];
tmp_reg_296[4] <= tmp_fu_175_p1[4];
tmp_reg_296[5] <= tmp_fu_175_p1[5];
tmp_reg_296[6] <= tmp_fu_175_p1[6];
tmp_reg_296[7] <= tmp_fu_175_p1[7];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st24_fsm_23 == ap_CS_fsm)) begin
        tmp_2_reg_336 <= grp_fu_136_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_140_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_140_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_140_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_140_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_m_axi_input_r_ARREADY assign process. ///
always @ (m_axi_input_r_ARREADY or ap_reg_ioackin_m_axi_input_r_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = m_axi_input_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = ap_const_logic_1;
    end
end

/// m_axi_input_r_ARADDR assign process. ///
always @ (ap_CS_fsm or bias_addr_reg_285 or bias_addr_2_reg_314 or bias_addr_3_reg_320 or ap_reg_ioackin_m_axi_input_r_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) begin
        if ((ap_ST_st12_fsm_11 == ap_CS_fsm)) begin
            m_axi_input_r_ARADDR = bias_addr_3_reg_320;
        end else if ((ap_ST_st11_fsm_10 == ap_CS_fsm)) begin
            m_axi_input_r_ARADDR = bias_addr_2_reg_314;
        end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
            m_axi_input_r_ARADDR = bias_addr_reg_285;
        end else begin
            m_axi_input_r_ARADDR = 'bx;
        end
    end else begin
        m_axi_input_r_ARADDR = 'bx;
    end
end

/// m_axi_input_r_ARVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ioackin_m_axi_input_r_ARREADY)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_m_axi_input_r_ARREADY) & (ap_ST_st11_fsm_10 == ap_CS_fsm)) | ((ap_const_logic_0 == ap_reg_ioackin_m_axi_input_r_ARREADY) & (ap_ST_st12_fsm_11 == ap_CS_fsm)))) begin
        m_axi_input_r_ARVALID = ap_const_logic_1;
    end else begin
        m_axi_input_r_ARVALID = ap_const_logic_0;
    end
end

/// m_axi_input_r_RREADY assign process. ///
always @ (ap_CS_fsm or m_axi_input_r_RVALID)
begin
    if ((((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(m_axi_input_r_RVALID == ap_const_logic_0)) | (~(m_axi_input_r_RVALID == ap_const_logic_0) & (ap_ST_st16_fsm_15 == ap_CS_fsm)) | (~(m_axi_input_r_RVALID == ap_const_logic_0) & (ap_ST_st17_fsm_16 == ap_CS_fsm)))) begin
        m_axi_input_r_RREADY = ap_const_logic_1;
    end else begin
        m_axi_input_r_RREADY = ap_const_logic_0;
    end
end

/// output_r_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st10_fsm_9 == ap_CS_fsm)) begin
        output_r_ce0 = ap_const_logic_1;
    end else begin
        output_r_ce0 = ap_const_logic_0;
    end
end

/// output_r_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_195_p2)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_195_p2))) begin
        output_r_we0 = ap_const_logic_1;
    end else begin
        output_r_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or m_axi_input_r_RVALID or exitcond1_fu_140_p2 or exitcond_fu_195_p2 or ap_sig_ioackin_m_axi_input_r_ARREADY)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_140_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (~(m_axi_input_r_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_195_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st11_fsm_10 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st12_fsm_11 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_st13_fsm_12;
            end else begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            if (~(m_axi_input_r_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        end
        ap_ST_st17_fsm_16 : 
        begin
            if (~(m_axi_input_r_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st18_fsm_17;
            end else begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st29_fsm_28;
        end
        ap_ST_st29_fsm_28 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign exitcond1_fu_140_p2 = (i_reg_96 == ap_const_lv8_80? 1'b1: 1'b0);
assign exitcond_fu_195_p2 = (j_reg_119 == ap_const_lv10_310? 1'b1: 1'b0);
assign grp_fu_131_ce = ap_const_logic_1;
assign grp_fu_131_p0 = sum2_reg_108;
assign grp_fu_131_p1 = tmp_2_reg_336;
assign grp_fu_136_ce = ap_const_logic_1;
assign grp_fu_136_p0 = bias_addr_2_read_reg_326;
assign grp_fu_136_p1 = bias_addr_3_read_reg_331;
assign i_1_fu_146_p2 = (i_reg_96 + ap_const_lv8_1);
assign j_1_fu_201_p2 = (j_reg_119 + ap_const_lv10_1);
assign m_axi_input_r_ARBURST = ap_const_lv2_0;
assign m_axi_input_r_ARCACHE = ap_const_lv4_0;
assign m_axi_input_r_ARID = ap_const_lv1_0;
assign m_axi_input_r_ARLEN = ap_const_lv32_1;
assign m_axi_input_r_ARLOCK = ap_const_lv2_0;
assign m_axi_input_r_ARPROT = ap_const_lv3_0;
assign m_axi_input_r_ARQOS = ap_const_lv4_0;
assign m_axi_input_r_ARREGION = ap_const_lv4_0;
assign m_axi_input_r_ARSIZE = ap_const_lv3_0;
assign m_axi_input_r_ARUSER = ap_const_lv1_0;
assign m_axi_input_r_AWADDR = ap_const_lv32_0;
assign m_axi_input_r_AWBURST = ap_const_lv2_0;
assign m_axi_input_r_AWCACHE = ap_const_lv4_0;
assign m_axi_input_r_AWID = ap_const_lv1_0;
assign m_axi_input_r_AWLEN = ap_const_lv32_0;
assign m_axi_input_r_AWLOCK = ap_const_lv2_0;
assign m_axi_input_r_AWPROT = ap_const_lv3_0;
assign m_axi_input_r_AWQOS = ap_const_lv4_0;
assign m_axi_input_r_AWREGION = ap_const_lv4_0;
assign m_axi_input_r_AWSIZE = ap_const_lv3_0;
assign m_axi_input_r_AWUSER = ap_const_lv1_0;
assign m_axi_input_r_AWVALID = ap_const_logic_0;
assign m_axi_input_r_BREADY = ap_const_logic_0;
assign m_axi_input_r_WDATA = ap_const_lv32_0;
assign m_axi_input_r_WID = ap_const_lv1_0;
assign m_axi_input_r_WLAST = ap_const_logic_0;
assign m_axi_input_r_WSTRB = ap_const_lv4_0;
assign m_axi_input_r_WUSER = ap_const_lv1_0;
assign m_axi_input_r_WVALID = ap_const_logic_0;

/// neural_network_dense_1_ap_rst assign process. ///
always @ (ap_rst_n)
begin
    neural_network_dense_1_ap_rst = ~ap_rst_n;
end
assign output_r_address0 = tmp_reg_296;
assign output_r_d0 = sum2_reg_108;
assign sext4_cast_fu_243_p1 = $unsigned(dense_1_weights5);
assign sext8_cast_fu_156_p1 = $unsigned(dense_1_bias7);
assign sext_cast_fu_215_p1 = $unsigned(input1);
assign sum1_cast_fu_224_p1 = $unsigned(sum1_fu_218_p2);
assign sum1_fu_218_p2 = (sext_cast_fu_215_p1 + tmp_cast1_fu_207_p1);
assign sum5_cast_fu_252_p1 = $unsigned(sum5_fu_246_p2);
assign sum5_fu_246_p2 = (sext4_cast_fu_243_p1 + tmp_3_cast_cast_fu_239_p1);
assign sum9_cast_fu_165_p1 = $unsigned(sum9_fu_159_p2);
assign sum9_fu_159_p2 = (sext8_cast_fu_156_p1 + tmp_cast_fu_152_p1);
assign tmp_1_cast_fu_191_p1 = $unsigned(tmp_1_fu_183_p3);
assign tmp_1_fu_183_p3 = {{tmp_4_fu_179_p1}, {ap_const_lv7_0}};
assign tmp_3_cast_cast_fu_239_p1 = $unsigned(tmp_3_fu_234_p2);
assign tmp_3_fu_234_p2 = (tmp_1_cast_reg_301 + tmp_cast_41_fu_211_p1);
assign tmp_4_fu_179_p1 = i_reg_96[6:0];
assign tmp_cast1_fu_207_p1 = $unsigned(j_reg_119);
assign tmp_cast_41_fu_211_p1 = $unsigned(j_reg_119);
assign tmp_cast_fu_152_p1 = $unsigned(i_reg_96);
assign tmp_fu_175_p1 = $unsigned(i_reg_96);
always @ (posedge ap_clk)
begin
    tmp_reg_296[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    tmp_1_cast_reg_301[6:0] <= 7'b0000000;
    tmp_1_cast_reg_301[14] <= 1'b0;
end



endmodule //neural_network_dense_1

