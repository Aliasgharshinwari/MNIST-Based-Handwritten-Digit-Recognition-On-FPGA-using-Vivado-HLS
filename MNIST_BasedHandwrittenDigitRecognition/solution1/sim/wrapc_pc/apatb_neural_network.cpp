// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ==============================================================


#include <systemc>
#include <iostream>
#include <cstdlib>
#include <cstddef>
#include <stdint.h>
#include "SysCFileHandler.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;




   #define AUTOTB_TVIN_gmem  "../tv/cdatafile/c.neural_network.autotvin_gmem.dat"
   #define AUTOTB_TVOUT_gmem  "../tv/cdatafile/c.neural_network.autotvout_gmem.dat"
   #define AUTOTB_TVIN_input_r  "../tv/cdatafile/c.neural_network.autotvin_input_r.dat"
   #define AUTOTB_TVIN_output_r  "../tv/cdatafile/c.neural_network.autotvin_output_r.dat"
   #define AUTOTB_TVIN_dense_1_weights  "../tv/cdatafile/c.neural_network.autotvin_dense_1_weights.dat"
   #define AUTOTB_TVIN_dense_1_bias  "../tv/cdatafile/c.neural_network.autotvin_dense_1_bias.dat"
   #define AUTOTB_TVIN_dense_2_weights  "../tv/cdatafile/c.neural_network.autotvin_dense_2_weights.dat"
   #define AUTOTB_TVIN_dense_2_bias  "../tv/cdatafile/c.neural_network.autotvin_dense_2_bias.dat"
   #define INTER_TCL  "../tv/cdatafile/ref.tcl"

   #define AUTOTB_TVOUT_PC_gmem  "../tv/rtldatafile/rtl.neural_network.autotvout_gmem.dat"

class INTER_TCL_FILE {
    public:
//functions
        INTER_TCL_FILE(const char* name) {
            mName = name;
            gmem_depth = 0;
            input_r_depth = 0;
            output_r_depth = 0;
            dense_1_weights_depth = 0;
            dense_1_bias_depth = 0;
            dense_2_weights_depth = 0;
            dense_2_bias_depth = 0;
            trans_num =0;
        }
        ~INTER_TCL_FILE() {
            mFile.open(mName);
            if (!mFile.good() ) {
                cout<<"Failed to open file ref.tcl."<<endl;
                exit (1);
            }
            string total_list = get_depth_list();
            mFile<<"set depth_list {\n";
            mFile<<total_list; 
            mFile<<"}\n";
            mFile<<"set trans_num "<<trans_num<<endl;
            mFile.close();
        }
        string get_depth_list () {
            stringstream total_list;
            total_list<<"   {gmem "<< gmem_depth << "}\n";
            total_list<<"   {input_r "<< input_r_depth << "}\n";
            total_list<<"   {output_r "<< output_r_depth << "}\n";
            total_list<<"   {dense_1_weights "<< dense_1_weights_depth << "}\n";
            total_list<<"   {dense_1_bias "<< dense_1_bias_depth << "}\n";
            total_list<<"   {dense_2_weights "<< dense_2_weights_depth << "}\n";
            total_list<<"   {dense_2_bias "<< dense_2_bias_depth << "}\n";
            return total_list.str();
        }
        void set_num (int num , int* class_num) {
            (*class_num) = (*class_num) > num ? (*class_num) : num;
        }
    public:
//variables
        int gmem_depth;
        int input_r_depth;
        int output_r_depth;
        int dense_1_weights_depth;
        int dense_1_bias_depth;
        int dense_2_weights_depth;
        int dense_2_bias_depth;
        int trans_num;
    private:
        ofstream mFile;
        const char* mName;
};

#define neural_network AESL_ORIG_DUT_neural_network
extern void neural_network ( float input[784],  float output[10], const float dense_1_weights[784][128], const float dense_1_bias[128], const float dense_2_weights[128][10], const float dense_2_bias[10]);
#undef neural_network
void neural_network ( float input[784],  float output[10], const float dense_1_weights[784][128], const float dense_1_bias[128], const float dense_2_weights[128][10], const float dense_2_bias[10]) {

    fstream wrapc_switch_file_token;

    wrapc_switch_file_token.open(".hls_cosim_wrapc_switch.log");

    int AESL_i;

    if (wrapc_switch_file_token.good()) {

        static unsigned AESL_transaction_pc;

        string AESL_token;

        string AESL_num;

        static AESL_FILE_HANDLER aesl_fh;

        aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_token); //[[transaction]]

        if ( AESL_token != "[[transaction]]") {

           exit(1);

        }

        aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_num); //transaction number

        if (atoi(AESL_num.c_str()) == AESL_transaction_pc ) {

            aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_token); //data

            sc_bv<32> *gmem_pc_buffer = new sc_bv<32>[102564];

            int i = 0;

            while (AESL_token != "[[/transaction]]") {

                bool no_x = false;

                bool err = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('X');

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'gmem', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                no_x = false;

                while (!no_x) {

                size_t x_found = AESL_token.find('x', 2);

                if (x_found != string::npos) {

                    if (!err) {

                        cerr << "@W [SIM-201] RTL produces unknown value 'X' on port 'gmem', possible cause: There are uninitialized variables in the C design." << endl; 

                        err = true;

                    }

                    AESL_token.replace(x_found, 1, "0");

                } else {

                    no_x = true;

                }

                }

                if (AESL_token != "") {

                    gmem_pc_buffer[i] = AESL_token.c_str();

                    i++;

                }

                aesl_fh.read(AUTOTB_TVOUT_PC_gmem, AESL_token); //data or [[/transaction]]

                if (AESL_token == "[[[/runtime]]]" || aesl_fh.eof(AUTOTB_TVOUT_PC_gmem)) {

                   exit(1);

                }

            }

            if (i > 0) {

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 783 ; i_0+= 1) {

                    AESL_i++;

                }

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 9 ; i_0+= 1) {

                    if((int *)&output[i_0] != 0) {

                       *(int *)&output[i_0] = (sc_bv<32>(gmem_pc_buffer[784 + AESL_i].range(31, 0))).to_uint64();

                    }

                    AESL_i++;

                }

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 783 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 127 ; i_1+= 1) {

                        AESL_i++;

                    }

                }

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 127 ; i_0+= 1) {

                    AESL_i++;

                }

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 127 ; i_0+= 1) {

                    for (int i_1 = 0; i_1 <= 9 ; i_1+= 1) {

                        AESL_i++;

                    }

                }

                AESL_i = 0; //subscript for rtl array

                for (int i_0 = 0; i_0 <= 9 ; i_0+= 1) {

                    AESL_i++;

                }

                }

            delete [] gmem_pc_buffer;

        }

        AESL_transaction_pc ++ ;

    } else {

        static unsigned AESL_transaction;

        static AESL_FILE_HANDLER aesl_fh;

        char* tvin_gmem = new char[50];

        char* tvout_gmem = new char[50];

        char* tvin_input_r = new char[50];

        char* tvin_output_r = new char[50];

        char* tvin_dense_1_weights = new char[50];

        char* tvin_dense_1_bias = new char[50];

        char* tvin_dense_2_weights = new char[50];

        char* tvin_dense_2_bias = new char[50];

        static INTER_TCL_FILE tcl_file(INTER_TCL);


        int leading_zero;

        sprintf(tvin_gmem, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);

        sc_bv<32> *gmem_tvin_wrapc_buffer = new sc_bv<32>[102564];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 783 ; i_0+= 1) {

            if((int *)&input[i_0] != 0) {

               gmem_tvin_wrapc_buffer[0 + AESL_i].range(31, 0) = *(int *)&input[i_0];

            }

            AESL_i++;

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 9 ; i_0+= 1) {

            if((int *)&output[i_0] != 0) {

               gmem_tvin_wrapc_buffer[784 + AESL_i].range(31, 0) = *(int *)&output[i_0];

            }

            AESL_i++;

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 783 ; i_0+= 1) {

            for (int i_1 = 0; i_1 <= 127 ; i_1+= 1) {

                if((int *)&dense_1_weights[i_0][i_1] != 0) {

                   gmem_tvin_wrapc_buffer[794 + AESL_i].range(31, 0) = *(int *)&dense_1_weights[i_0][i_1];

                }

                AESL_i++;

            }

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 127 ; i_0+= 1) {

            if((int *)&dense_1_bias[i_0] != 0) {

               gmem_tvin_wrapc_buffer[101146 + AESL_i].range(31, 0) = *(int *)&dense_1_bias[i_0];

            }

            AESL_i++;

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 127 ; i_0+= 1) {

            for (int i_1 = 0; i_1 <= 9 ; i_1+= 1) {

                if((int *)&dense_2_weights[i_0][i_1] != 0) {

                   gmem_tvin_wrapc_buffer[101274 + AESL_i].range(31, 0) = *(int *)&dense_2_weights[i_0][i_1];

                }

                AESL_i++;

            }

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 9 ; i_0+= 1) {

            if((int *)&dense_2_bias[i_0] != 0) {

               gmem_tvin_wrapc_buffer[102554 + AESL_i].range(31, 0) = *(int *)&dense_2_bias[i_0];

            }

            AESL_i++;

        }

        for (int i = 0; i < 102564 ; i++) {

            sprintf(tvin_gmem, "%s\n", (gmem_tvin_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);

        }

        tcl_file.set_num(102564,&tcl_file.gmem_depth);

        sprintf(tvin_gmem, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_gmem, tvin_gmem);

        delete [] gmem_tvin_wrapc_buffer;

        sprintf(tvin_input_r, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_input_r, tvin_input_r);

        sc_bv<32> input_r_tvin_wrapc_buffer;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_input_r, "%s\n", (input_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_input_r, tvin_input_r);

        }

        tcl_file.set_num(1,&tcl_file.input_r_depth);

        sprintf(tvin_input_r, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_input_r, tvin_input_r);

        sprintf(tvin_output_r, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_output_r, tvin_output_r);

        sc_bv<32> output_r_tvin_wrapc_buffer;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_output_r, "%s\n", (output_r_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_output_r, tvin_output_r);

        }

        tcl_file.set_num(1,&tcl_file.output_r_depth);

        sprintf(tvin_output_r, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_output_r, tvin_output_r);

        sprintf(tvin_dense_1_weights, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_dense_1_weights, tvin_dense_1_weights);

        sc_bv<32> dense_1_weights_tvin_wrapc_buffer;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_dense_1_weights, "%s\n", (dense_1_weights_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_dense_1_weights, tvin_dense_1_weights);

        }

        tcl_file.set_num(1,&tcl_file.dense_1_weights_depth);

        sprintf(tvin_dense_1_weights, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_dense_1_weights, tvin_dense_1_weights);

        sprintf(tvin_dense_1_bias, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_dense_1_bias, tvin_dense_1_bias);

        sc_bv<32> dense_1_bias_tvin_wrapc_buffer;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_dense_1_bias, "%s\n", (dense_1_bias_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_dense_1_bias, tvin_dense_1_bias);

        }

        tcl_file.set_num(1,&tcl_file.dense_1_bias_depth);

        sprintf(tvin_dense_1_bias, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_dense_1_bias, tvin_dense_1_bias);

        sprintf(tvin_dense_2_weights, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_dense_2_weights, tvin_dense_2_weights);

        sc_bv<32> dense_2_weights_tvin_wrapc_buffer;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_dense_2_weights, "%s\n", (dense_2_weights_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_dense_2_weights, tvin_dense_2_weights);

        }

        tcl_file.set_num(1,&tcl_file.dense_2_weights_depth);

        sprintf(tvin_dense_2_weights, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_dense_2_weights, tvin_dense_2_weights);

        sprintf(tvin_dense_2_bias, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVIN_dense_2_bias, tvin_dense_2_bias);

        sc_bv<32> dense_2_bias_tvin_wrapc_buffer;

        for (int i = 0; i < 1 ; i++) {

            sprintf(tvin_dense_2_bias, "%s\n", (dense_2_bias_tvin_wrapc_buffer).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVIN_dense_2_bias, tvin_dense_2_bias);

        }

        tcl_file.set_num(1,&tcl_file.dense_2_bias_depth);

        sprintf(tvin_dense_2_bias, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVIN_dense_2_bias, tvin_dense_2_bias);

        AESL_ORIG_DUT_neural_network(input,output,dense_1_weights,dense_1_bias,dense_2_weights,dense_2_bias);

        sprintf(tvout_gmem, "[[transaction]] %d\n", AESL_transaction);

        aesl_fh.write(AUTOTB_TVOUT_gmem, tvout_gmem);

        sc_bv<32> *gmem_tvout_wrapc_buffer = new sc_bv<32>[102564];

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 783 ; i_0+= 1) {

            if((int *)&input[i_0] != 0) {

               gmem_tvout_wrapc_buffer[0 + AESL_i].range(31, 0) = *(int *)&input[i_0];

            }

            AESL_i++;

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 9 ; i_0+= 1) {

            if((int *)&output[i_0] != 0) {

               gmem_tvout_wrapc_buffer[784 + AESL_i].range(31, 0) = *(int *)&output[i_0];

            }

            AESL_i++;

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 783 ; i_0+= 1) {

            for (int i_1 = 0; i_1 <= 127 ; i_1+= 1) {

                if((int *)&dense_1_weights[i_0][i_1] != 0) {

                   gmem_tvout_wrapc_buffer[794 + AESL_i].range(31, 0) = *(int *)&dense_1_weights[i_0][i_1];

                }

                AESL_i++;

            }

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 127 ; i_0+= 1) {

            if((int *)&dense_1_bias[i_0] != 0) {

               gmem_tvout_wrapc_buffer[101146 + AESL_i].range(31, 0) = *(int *)&dense_1_bias[i_0];

            }

            AESL_i++;

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 127 ; i_0+= 1) {

            for (int i_1 = 0; i_1 <= 9 ; i_1+= 1) {

                if((int *)&dense_2_weights[i_0][i_1] != 0) {

                   gmem_tvout_wrapc_buffer[101274 + AESL_i].range(31, 0) = *(int *)&dense_2_weights[i_0][i_1];

                }

                AESL_i++;

            }

        }

        AESL_i = 0; //subscript for rtl array

        for (int i_0 = 0; i_0 <= 9 ; i_0+= 1) {

            if((int *)&dense_2_bias[i_0] != 0) {

               gmem_tvout_wrapc_buffer[102554 + AESL_i].range(31, 0) = *(int *)&dense_2_bias[i_0];

            }

            AESL_i++;

        }

        for (int i = 0; i < 102564 ; i++) {

            sprintf(tvout_gmem, "%s\n", (gmem_tvout_wrapc_buffer[i]).to_string(SC_HEX).c_str());

            aesl_fh.write(AUTOTB_TVOUT_gmem, tvout_gmem);

        }

        tcl_file.set_num(102564,&tcl_file.gmem_depth);

        sprintf(tvout_gmem, "[[/transaction]] \n");

        aesl_fh.write(AUTOTB_TVOUT_gmem, tvout_gmem);

        delete [] gmem_tvout_wrapc_buffer;

        delete [] tvin_gmem;

        delete [] tvout_gmem;

        delete [] tvin_input_r;

        delete [] tvin_output_r;

        delete [] tvin_dense_1_weights;

        delete [] tvin_dense_1_bias;

        delete [] tvin_dense_2_weights;

        delete [] tvin_dense_2_bias;

        AESL_transaction++;

        tcl_file.set_num(AESL_transaction , &tcl_file.trans_num);

    }
}


