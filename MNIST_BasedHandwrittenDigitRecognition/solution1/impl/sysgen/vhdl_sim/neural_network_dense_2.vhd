-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_dense_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWVALID : OUT STD_LOGIC;
    m_axi_weights_AWREADY : IN STD_LOGIC;
    m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WVALID : OUT STD_LOGIC;
    m_axi_weights_WREADY : IN STD_LOGIC;
    m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_WLAST : OUT STD_LOGIC;
    m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARVALID : OUT STD_LOGIC;
    m_axi_weights_ARREADY : IN STD_LOGIC;
    m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RVALID : IN STD_LOGIC;
    m_axi_weights_RREADY : OUT STD_LOGIC;
    m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_weights_RLAST : IN STD_LOGIC;
    m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BVALID : IN STD_LOGIC;
    m_axi_weights_BREADY : OUT STD_LOGIC;
    m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    dense_2_weights9 : IN STD_LOGIC_VECTOR (29 downto 0);
    dense_2_bias11 : IN STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of neural_network_dense_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_5_fu_157_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_5_reg_277 : STD_LOGIC_VECTOR (3 downto 0);
    signal bias_addr_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_151_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_186_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_293 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_shl_cast_fu_198_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl_cast_reg_298 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_fu_210_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl2_cast_reg_303 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_fu_220_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_1_reg_311 : STD_LOGIC_VECTOR (7 downto 0);
    signal bias_addr_1_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal bias_addr_1_read_reg_332 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_147_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_337 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_106 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum4_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_129 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_259_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum5_cast_fu_176_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_249_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_weights_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_weights_ARREADY : STD_LOGIC;
    signal grp_fu_142_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_147_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_147_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext4_cast_fu_167_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_cast_fu_163_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum5_fu_170_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_shl_fu_190_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl2_fu_202_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp1_fu_226_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_cast_fu_240_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_5_cast_cast_fu_236_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum1_fu_243_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal neural_network_dense_2_ap_rst : STD_LOGIC;
    signal grp_fu_142_ce : STD_LOGIC;
    signal grp_fu_147_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component neural_network_fadd_32ns_32ns_32_5_no_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neural_network_fmul_32ns_32ns_32_7_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    neural_network_fadd_32ns_32ns_32_5_no_dsp_U7 : component neural_network_fadd_32ns_32ns_32_5_no_dsp
    generic map (
        ID => 7,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => neural_network_dense_2_ap_rst,
        din0 => grp_fu_142_p0,
        din1 => grp_fu_142_p1,
        ce => grp_fu_142_ce,
        dout => grp_fu_142_p2);

    neural_network_fmul_32ns_32ns_32_7_max_dsp_U8 : component neural_network_fmul_32ns_32ns_32_7_max_dsp
    generic map (
        ID => 8,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => neural_network_dense_2_ap_rst,
        din0 => grp_fu_147_p0,
        din1 => grp_fu_147_p1,
        ce => grp_fu_147_ce,
        dout => grp_fu_147_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_weights_ARREADY assign process. --
    ap_reg_ioackin_m_axi_weights_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((ap_const_logic_0 = ap_sig_ioackin_m_axi_weights_ARREADY))) or (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_weights_ARREADY)) and (ap_ST_st11_fsm_10 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = m_axi_weights_ARREADY) and (ap_ST_st3_fsm_2 = ap_CS_fsm)) or ((ap_const_logic_1 = m_axi_weights_ARREADY) and (ap_ST_st11_fsm_10 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i_reg_106 assign process. --
    i_reg_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_214_p2)))) then 
                i_reg_106 <= i_5_reg_277;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_106 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- j_reg_129 assign process. --
    j_reg_129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
                j_reg_129 <= j_1_reg_311;
            elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                j_reg_129 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- sum4_reg_118 assign process. --
    sum4_reg_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
                sum4_reg_118 <= grp_fu_142_p2;
            elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
                sum4_reg_118 <= sum_reg_288;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((m_axi_weights_RVALID = ap_const_logic_0)) and (ap_ST_st16_fsm_15 = ap_CS_fsm))) then
                bias_addr_1_read_reg_332 <= m_axi_weights_RDATA;
                input_load_reg_327 <= input_r_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st10_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_214_p2))) then
                bias_addr_1_reg_316 <= sum1_cast_fu_249_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_151_p2))) then
                bias_addr_reg_282 <= sum5_cast_fu_176_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then
                i_5_reg_277 <= i_5_fu_157_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then
                j_1_reg_311 <= j_1_fu_220_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                p_shl2_cast_reg_303(1) <= p_shl2_cast_fu_210_p1(1);
    p_shl2_cast_reg_303(2) <= p_shl2_cast_fu_210_p1(2);
    p_shl2_cast_reg_303(3) <= p_shl2_cast_fu_210_p1(3);
    p_shl2_cast_reg_303(4) <= p_shl2_cast_fu_210_p1(4);
                p_shl_cast_reg_298(3) <= p_shl_cast_fu_198_p1(3);
    p_shl_cast_reg_298(4) <= p_shl_cast_fu_198_p1(4);
    p_shl_cast_reg_298(5) <= p_shl_cast_fu_198_p1(5);
    p_shl_cast_reg_298(6) <= p_shl_cast_fu_198_p1(6);
                tmp_reg_293(0) <= tmp_fu_186_p1(0);
    tmp_reg_293(1) <= tmp_fu_186_p1(1);
    tmp_reg_293(2) <= tmp_fu_186_p1(2);
    tmp_reg_293(3) <= tmp_fu_186_p1(3);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((m_axi_weights_RVALID = ap_const_logic_0)))) then
                sum_reg_288 <= m_axi_weights_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st23_fsm_22 = ap_CS_fsm)) then
                tmp_3_reg_337 <= grp_fu_147_p2;
            end if;
        end if;
    end process;
    tmp_reg_293(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_shl_cast_reg_298(2 downto 0) <= "000";
    p_shl_cast_reg_298(7) <= '0';
    p_shl2_cast_reg_303(0) <= '0';
    p_shl2_cast_reg_303(7 downto 5) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, m_axi_weights_RVALID, exitcond1_fu_151_p2, exitcond_fu_214_p2, ap_sig_ioackin_m_axi_weights_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_151_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_weights_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                if (not((m_axi_weights_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                if (not((ap_const_lv1_0 = exitcond_fu_214_p2))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st11_fsm_10 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_weights_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st12_fsm_11;
                else
                    ap_NS_fsm <= ap_ST_st11_fsm_10;
                end if;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if (not((m_axi_weights_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                else
                    ap_NS_fsm <= ap_ST_st16_fsm_15;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond1_fu_151_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_151_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond1_fu_151_p2)
    begin
        if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_151_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_weights_ARREADY assign process. --
    ap_sig_ioackin_m_axi_weights_ARREADY_assign_proc : process(m_axi_weights_ARREADY, ap_reg_ioackin_m_axi_weights_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_weights_ARREADY)) then 
            ap_sig_ioackin_m_axi_weights_ARREADY <= m_axi_weights_ARREADY;
        else 
            ap_sig_ioackin_m_axi_weights_ARREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_151_p2 <= "1" when (i_reg_106 = ap_const_lv4_A) else "0";
    exitcond_fu_214_p2 <= "1" when (j_reg_129 = ap_const_lv8_80) else "0";
    grp_fu_142_ce <= ap_const_logic_1;
    grp_fu_142_p0 <= sum4_reg_118;
    grp_fu_142_p1 <= tmp_3_reg_337;
    grp_fu_147_ce <= ap_const_logic_1;
    grp_fu_147_p0 <= input_load_reg_327;
    grp_fu_147_p1 <= bias_addr_1_read_reg_332;
    i_5_fu_157_p2 <= std_logic_vector(unsigned(i_reg_106) + unsigned(ap_const_lv4_1));
    input_r_address0 <= tmp_s_fu_259_p1(7 - 1 downto 0);

    -- input_r_ce0 assign process. --
    input_r_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_220_p2 <= std_logic_vector(unsigned(j_reg_129) + unsigned(ap_const_lv8_1));

    -- m_axi_weights_ARADDR assign process. --
    m_axi_weights_ARADDR_assign_proc : process(ap_CS_fsm, bias_addr_reg_282, bias_addr_1_reg_316, ap_reg_ioackin_m_axi_weights_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_weights_ARREADY)) then
            if ((ap_ST_st11_fsm_10 = ap_CS_fsm)) then 
                m_axi_weights_ARADDR <= bias_addr_1_reg_316;
            elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
                m_axi_weights_ARADDR <= bias_addr_reg_282;
            else 
                m_axi_weights_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_weights_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_weights_ARBURST <= ap_const_lv2_0;
    m_axi_weights_ARCACHE <= ap_const_lv4_0;
    m_axi_weights_ARID <= ap_const_lv1_0;
    m_axi_weights_ARLEN <= ap_const_lv32_1;
    m_axi_weights_ARLOCK <= ap_const_lv2_0;
    m_axi_weights_ARPROT <= ap_const_lv3_0;
    m_axi_weights_ARQOS <= ap_const_lv4_0;
    m_axi_weights_ARREGION <= ap_const_lv4_0;
    m_axi_weights_ARSIZE <= ap_const_lv3_0;
    m_axi_weights_ARUSER <= ap_const_lv1_0;

    -- m_axi_weights_ARVALID assign process. --
    m_axi_weights_ARVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_m_axi_weights_ARREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_weights_ARREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_axi_weights_ARREADY) and (ap_ST_st11_fsm_10 = ap_CS_fsm)))) then 
            m_axi_weights_ARVALID <= ap_const_logic_1;
        else 
            m_axi_weights_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_AWADDR <= ap_const_lv32_0;
    m_axi_weights_AWBURST <= ap_const_lv2_0;
    m_axi_weights_AWCACHE <= ap_const_lv4_0;
    m_axi_weights_AWID <= ap_const_lv1_0;
    m_axi_weights_AWLEN <= ap_const_lv32_0;
    m_axi_weights_AWLOCK <= ap_const_lv2_0;
    m_axi_weights_AWPROT <= ap_const_lv3_0;
    m_axi_weights_AWQOS <= ap_const_lv4_0;
    m_axi_weights_AWREGION <= ap_const_lv4_0;
    m_axi_weights_AWSIZE <= ap_const_lv3_0;
    m_axi_weights_AWUSER <= ap_const_lv1_0;
    m_axi_weights_AWVALID <= ap_const_logic_0;
    m_axi_weights_BREADY <= ap_const_logic_0;

    -- m_axi_weights_RREADY assign process. --
    m_axi_weights_RREADY_assign_proc : process(ap_CS_fsm, m_axi_weights_RVALID)
    begin
        if ((((ap_ST_st8_fsm_7 = ap_CS_fsm) and not((m_axi_weights_RVALID = ap_const_logic_0))) or (not((m_axi_weights_RVALID = ap_const_logic_0)) and (ap_ST_st16_fsm_15 = ap_CS_fsm)))) then 
            m_axi_weights_RREADY <= ap_const_logic_1;
        else 
            m_axi_weights_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_weights_WDATA <= ap_const_lv32_0;
    m_axi_weights_WID <= ap_const_lv1_0;
    m_axi_weights_WLAST <= ap_const_logic_0;
    m_axi_weights_WSTRB <= ap_const_lv4_0;
    m_axi_weights_WUSER <= ap_const_lv1_0;
    m_axi_weights_WVALID <= ap_const_logic_0;

    -- neural_network_dense_2_ap_rst assign process. --
    neural_network_dense_2_ap_rst_assign_proc : process(ap_rst_n)
    begin
                neural_network_dense_2_ap_rst <= not(ap_rst_n);
    end process;

    output_r_address0 <= tmp_reg_293(4 - 1 downto 0);

    -- output_r_ce0 assign process. --
    output_r_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st10_fsm_9 = ap_CS_fsm)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= sum4_reg_118;

    -- output_r_we0 assign process. --
    output_r_we0_assign_proc : process(ap_CS_fsm, exitcond_fu_214_p2)
    begin
        if ((((ap_ST_st10_fsm_9 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_214_p2))))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl2_cast_fu_210_p1 <= std_logic_vector(resize(unsigned(p_shl2_fu_202_p3),8));
    p_shl2_fu_202_p3 <= (i_reg_106 & ap_const_lv1_0);
    p_shl_cast_fu_198_p1 <= std_logic_vector(resize(unsigned(p_shl_fu_190_p3),8));
    p_shl_fu_190_p3 <= (i_reg_106 & ap_const_lv3_0);
    sext4_cast_fu_167_p1 <= std_logic_vector(resize(unsigned(dense_2_bias11),33));
    sext_cast_fu_240_p1 <= std_logic_vector(resize(unsigned(dense_2_weights9),33));
    sum1_cast_fu_249_p1 <= std_logic_vector(resize(unsigned(sum1_fu_243_p2),64));
    sum1_fu_243_p2 <= std_logic_vector(unsigned(sext_cast_fu_240_p1) + unsigned(tmp_5_cast_cast_fu_236_p1));
    sum5_cast_fu_176_p1 <= std_logic_vector(resize(unsigned(sum5_fu_170_p2),64));
    sum5_fu_170_p2 <= std_logic_vector(unsigned(sext4_cast_fu_167_p1) + unsigned(tmp_cast_fu_163_p1));
    tmp1_fu_226_p2 <= std_logic_vector(unsigned(p_shl2_cast_reg_303) + unsigned(j_reg_129));
    tmp_5_cast_cast_fu_236_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_231_p2),33));
    tmp_5_fu_231_p2 <= std_logic_vector(unsigned(tmp1_fu_226_p2) + unsigned(p_shl_cast_reg_298));
    tmp_cast_fu_163_p1 <= std_logic_vector(resize(unsigned(i_reg_106),33));
    tmp_fu_186_p1 <= std_logic_vector(resize(unsigned(i_reg_106),64));
    tmp_s_fu_259_p1 <= std_logic_vector(resize(unsigned(j_reg_129),64));
end behav;
