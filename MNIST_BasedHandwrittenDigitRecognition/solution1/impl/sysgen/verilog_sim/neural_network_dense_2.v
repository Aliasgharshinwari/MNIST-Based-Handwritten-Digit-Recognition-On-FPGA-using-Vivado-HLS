// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2014.2
// Copyright (C) 2014 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module neural_network_dense_2 (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0,
        m_axi_weights_AWVALID,
        m_axi_weights_AWREADY,
        m_axi_weights_AWADDR,
        m_axi_weights_AWID,
        m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT,
        m_axi_weights_AWQOS,
        m_axi_weights_AWREGION,
        m_axi_weights_AWUSER,
        m_axi_weights_WVALID,
        m_axi_weights_WREADY,
        m_axi_weights_WDATA,
        m_axi_weights_WSTRB,
        m_axi_weights_WLAST,
        m_axi_weights_WID,
        m_axi_weights_WUSER,
        m_axi_weights_ARVALID,
        m_axi_weights_ARREADY,
        m_axi_weights_ARADDR,
        m_axi_weights_ARID,
        m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT,
        m_axi_weights_ARQOS,
        m_axi_weights_ARREGION,
        m_axi_weights_ARUSER,
        m_axi_weights_RVALID,
        m_axi_weights_RREADY,
        m_axi_weights_RDATA,
        m_axi_weights_RLAST,
        m_axi_weights_RID,
        m_axi_weights_RUSER,
        m_axi_weights_RRESP,
        m_axi_weights_BVALID,
        m_axi_weights_BREADY,
        m_axi_weights_BRESP,
        m_axi_weights_BID,
        m_axi_weights_BUSER,
        dense_2_weights9,
        dense_2_bias11
);

parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 5'b00000;
parameter    ap_ST_st2_fsm_1 = 5'b1;
parameter    ap_ST_st3_fsm_2 = 5'b10;
parameter    ap_ST_st4_fsm_3 = 5'b11;
parameter    ap_ST_st5_fsm_4 = 5'b100;
parameter    ap_ST_st6_fsm_5 = 5'b101;
parameter    ap_ST_st7_fsm_6 = 5'b110;
parameter    ap_ST_st8_fsm_7 = 5'b111;
parameter    ap_ST_st9_fsm_8 = 5'b1000;
parameter    ap_ST_st10_fsm_9 = 5'b1001;
parameter    ap_ST_st11_fsm_10 = 5'b1010;
parameter    ap_ST_st12_fsm_11 = 5'b1011;
parameter    ap_ST_st13_fsm_12 = 5'b1100;
parameter    ap_ST_st14_fsm_13 = 5'b1101;
parameter    ap_ST_st15_fsm_14 = 5'b1110;
parameter    ap_ST_st16_fsm_15 = 5'b1111;
parameter    ap_ST_st17_fsm_16 = 5'b10000;
parameter    ap_ST_st18_fsm_17 = 5'b10001;
parameter    ap_ST_st19_fsm_18 = 5'b10010;
parameter    ap_ST_st20_fsm_19 = 5'b10011;
parameter    ap_ST_st21_fsm_20 = 5'b10100;
parameter    ap_ST_st22_fsm_21 = 5'b10101;
parameter    ap_ST_st23_fsm_22 = 5'b10110;
parameter    ap_ST_st24_fsm_23 = 5'b10111;
parameter    ap_ST_st25_fsm_24 = 5'b11000;
parameter    ap_ST_st26_fsm_25 = 5'b11001;
parameter    ap_ST_st27_fsm_26 = 5'b11010;
parameter    ap_ST_st28_fsm_27 = 5'b11011;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv4_A = 4'b1010;
parameter    ap_const_lv4_1 = 4'b1;
parameter    ap_const_lv8_80 = 8'b10000000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_true = 1'b1;

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [3:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;
output   m_axi_weights_AWVALID;
input   m_axi_weights_AWREADY;
output  [31:0] m_axi_weights_AWADDR;
output  [0:0] m_axi_weights_AWID;
output  [31:0] m_axi_weights_AWLEN;
output  [2:0] m_axi_weights_AWSIZE;
output  [1:0] m_axi_weights_AWBURST;
output  [1:0] m_axi_weights_AWLOCK;
output  [3:0] m_axi_weights_AWCACHE;
output  [2:0] m_axi_weights_AWPROT;
output  [3:0] m_axi_weights_AWQOS;
output  [3:0] m_axi_weights_AWREGION;
output  [0:0] m_axi_weights_AWUSER;
output   m_axi_weights_WVALID;
input   m_axi_weights_WREADY;
output  [31:0] m_axi_weights_WDATA;
output  [3:0] m_axi_weights_WSTRB;
output   m_axi_weights_WLAST;
output  [0:0] m_axi_weights_WID;
output  [0:0] m_axi_weights_WUSER;
output   m_axi_weights_ARVALID;
input   m_axi_weights_ARREADY;
output  [31:0] m_axi_weights_ARADDR;
output  [0:0] m_axi_weights_ARID;
output  [31:0] m_axi_weights_ARLEN;
output  [2:0] m_axi_weights_ARSIZE;
output  [1:0] m_axi_weights_ARBURST;
output  [1:0] m_axi_weights_ARLOCK;
output  [3:0] m_axi_weights_ARCACHE;
output  [2:0] m_axi_weights_ARPROT;
output  [3:0] m_axi_weights_ARQOS;
output  [3:0] m_axi_weights_ARREGION;
output  [0:0] m_axi_weights_ARUSER;
input   m_axi_weights_RVALID;
output   m_axi_weights_RREADY;
input  [31:0] m_axi_weights_RDATA;
input   m_axi_weights_RLAST;
input  [0:0] m_axi_weights_RID;
input  [0:0] m_axi_weights_RUSER;
input  [1:0] m_axi_weights_RRESP;
input   m_axi_weights_BVALID;
output   m_axi_weights_BREADY;
input  [1:0] m_axi_weights_BRESP;
input  [0:0] m_axi_weights_BID;
input  [0:0] m_axi_weights_BUSER;
input  [29:0] dense_2_weights9;
input  [29:0] dense_2_bias11;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg output_r_ce0;
reg output_r_we0;
reg m_axi_weights_ARVALID;
reg[31:0] m_axi_weights_ARADDR;
reg m_axi_weights_RREADY;
reg   [4:0] ap_CS_fsm = 5'b00000;
wire   [3:0] i_5_fu_157_p2;
reg   [3:0] i_5_reg_277;
reg   [31:0] bias_addr_reg_282;
wire   [0:0] exitcond1_fu_151_p2;
reg   [31:0] sum_reg_288;
wire   [63:0] tmp_fu_186_p1;
reg   [63:0] tmp_reg_293;
wire   [7:0] p_shl_cast_fu_198_p1;
reg   [7:0] p_shl_cast_reg_298;
wire   [7:0] p_shl2_cast_fu_210_p1;
reg   [7:0] p_shl2_cast_reg_303;
wire   [7:0] j_1_fu_220_p2;
reg   [7:0] j_1_reg_311;
reg   [31:0] bias_addr_1_reg_316;
wire   [0:0] exitcond_fu_214_p2;
reg   [31:0] input_load_reg_327;
reg   [31:0] bias_addr_1_read_reg_332;
wire   [31:0] grp_fu_147_p2;
reg   [31:0] tmp_3_reg_337;
wire   [31:0] grp_fu_142_p2;
reg   [3:0] i_reg_106;
reg   [31:0] sum4_reg_118;
reg   [7:0] j_reg_129;
wire   [63:0] tmp_s_fu_259_p1;
wire   [63:0] sum5_cast_fu_176_p1;
wire   [63:0] sum1_cast_fu_249_p1;
reg    ap_reg_ioackin_m_axi_weights_ARREADY = 1'b0;
reg    ap_sig_ioackin_m_axi_weights_ARREADY;
wire   [31:0] grp_fu_142_p0;
wire   [31:0] grp_fu_142_p1;
wire   [31:0] grp_fu_147_p0;
wire   [31:0] grp_fu_147_p1;
wire   [32:0] sext4_cast_fu_167_p1;
wire   [32:0] tmp_cast_fu_163_p1;
wire   [32:0] sum5_fu_170_p2;
wire   [6:0] p_shl_fu_190_p3;
wire   [4:0] p_shl2_fu_202_p3;
wire   [7:0] tmp1_fu_226_p2;
wire   [7:0] tmp_5_fu_231_p2;
wire   [32:0] sext_cast_fu_240_p1;
wire   [32:0] tmp_5_cast_cast_fu_236_p1;
wire   [32:0] sum1_fu_243_p2;
reg    neural_network_dense_2_ap_rst;
wire    grp_fu_142_ce;
wire    grp_fu_147_ce;
reg   [4:0] ap_NS_fsm;


neural_network_fadd_32ns_32ns_32_5_no_dsp #(
    .ID( 7 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
neural_network_fadd_32ns_32ns_32_5_no_dsp_U7(
    .clk( ap_clk ),
    .reset( neural_network_dense_2_ap_rst ),
    .din0( grp_fu_142_p0 ),
    .din1( grp_fu_142_p1 ),
    .ce( grp_fu_142_ce ),
    .dout( grp_fu_142_p2 )
);

neural_network_fmul_32ns_32ns_32_7_max_dsp #(
    .ID( 8 ),
    .NUM_STAGE( 7 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
neural_network_fmul_32ns_32ns_32_7_max_dsp_U8(
    .clk( ap_clk ),
    .reset( neural_network_dense_2_ap_rst ),
    .din0( grp_fu_147_p0 ),
    .din1( grp_fu_147_p1 ),
    .ce( grp_fu_147_ce ),
    .dout( grp_fu_147_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst_n == 1'b0) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ioackin_m_axi_weights_ARREADY assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ioackin_m_axi_weights_ARREADY
    if (ap_rst_n == 1'b0) begin
        ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
    end else begin
        if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(ap_const_logic_0 == ap_sig_ioackin_m_axi_weights_ARREADY)) | (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_weights_ARREADY) & (ap_ST_st11_fsm_10 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_0;
        end else if ((((ap_const_logic_1 == m_axi_weights_ARREADY) & (ap_ST_st3_fsm_2 == ap_CS_fsm)) | ((ap_const_logic_1 == m_axi_weights_ARREADY) & (ap_ST_st11_fsm_10 == ap_CS_fsm)))) begin
            ap_reg_ioackin_m_axi_weights_ARREADY <= ap_const_logic_1;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_214_p2))) begin
        i_reg_106 <= i_5_reg_277;
    end else if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
        i_reg_106 <= ap_const_lv4_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st28_fsm_27 == ap_CS_fsm)) begin
        j_reg_129 <= j_1_reg_311;
    end else if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        j_reg_129 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st28_fsm_27 == ap_CS_fsm)) begin
        sum4_reg_118 <= grp_fu_142_p2;
    end else if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        sum4_reg_118 <= sum_reg_288;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((~(m_axi_weights_RVALID == ap_const_logic_0) & (ap_ST_st16_fsm_15 == ap_CS_fsm))) begin
        bias_addr_1_read_reg_332 <= m_axi_weights_RDATA;
        input_load_reg_327 <= input_r_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond_fu_214_p2))) begin
        bias_addr_1_reg_316 <= sum1_cast_fu_249_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & (ap_const_lv1_0 == exitcond1_fu_151_p2))) begin
        bias_addr_reg_282 <= sum5_cast_fu_176_p1;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        i_5_reg_277 <= i_5_fu_157_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st10_fsm_9 == ap_CS_fsm)) begin
        j_1_reg_311 <= j_1_fu_220_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st9_fsm_8 == ap_CS_fsm)) begin
        p_shl2_cast_reg_303[1] <= p_shl2_cast_fu_210_p1[1];
p_shl2_cast_reg_303[2] <= p_shl2_cast_fu_210_p1[2];
p_shl2_cast_reg_303[3] <= p_shl2_cast_fu_210_p1[3];
p_shl2_cast_reg_303[4] <= p_shl2_cast_fu_210_p1[4];
        p_shl_cast_reg_298[3] <= p_shl_cast_fu_198_p1[3];
p_shl_cast_reg_298[4] <= p_shl_cast_fu_198_p1[4];
p_shl_cast_reg_298[5] <= p_shl_cast_fu_198_p1[5];
p_shl_cast_reg_298[6] <= p_shl_cast_fu_198_p1[6];
        tmp_reg_293[0] <= tmp_fu_186_p1[0];
tmp_reg_293[1] <= tmp_fu_186_p1[1];
tmp_reg_293[2] <= tmp_fu_186_p1[2];
tmp_reg_293[3] <= tmp_fu_186_p1[3];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(m_axi_weights_RVALID == ap_const_logic_0))) begin
        sum_reg_288 <= m_axi_weights_RDATA;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st23_fsm_22 == ap_CS_fsm)) begin
        tmp_3_reg_337 <= grp_fu_147_p2;
    end
end

/// ap_done assign process. ///
always @ (ap_start or ap_CS_fsm or exitcond1_fu_151_p2)
begin
    if (((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) | ((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_151_p2)))) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm or exitcond1_fu_151_p2)
begin
    if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond1_fu_151_p2))) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// ap_sig_ioackin_m_axi_weights_ARREADY assign process. ///
always @ (m_axi_weights_ARREADY or ap_reg_ioackin_m_axi_weights_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_weights_ARREADY)) begin
        ap_sig_ioackin_m_axi_weights_ARREADY = m_axi_weights_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_weights_ARREADY = ap_const_logic_1;
    end
end

/// input_r_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st15_fsm_14 == ap_CS_fsm)) begin
        input_r_ce0 = ap_const_logic_1;
    end else begin
        input_r_ce0 = ap_const_logic_0;
    end
end

/// m_axi_weights_ARADDR assign process. ///
always @ (ap_CS_fsm or bias_addr_reg_282 or bias_addr_1_reg_316 or ap_reg_ioackin_m_axi_weights_ARREADY)
begin
    if ((ap_const_logic_0 == ap_reg_ioackin_m_axi_weights_ARREADY)) begin
        if ((ap_ST_st11_fsm_10 == ap_CS_fsm)) begin
            m_axi_weights_ARADDR = bias_addr_1_reg_316;
        end else if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
            m_axi_weights_ARADDR = bias_addr_reg_282;
        end else begin
            m_axi_weights_ARADDR = 'bx;
        end
    end else begin
        m_axi_weights_ARADDR = 'bx;
    end
end

/// m_axi_weights_ARVALID assign process. ///
always @ (ap_CS_fsm or ap_reg_ioackin_m_axi_weights_ARREADY)
begin
    if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & (ap_const_logic_0 == ap_reg_ioackin_m_axi_weights_ARREADY)) | ((ap_const_logic_0 == ap_reg_ioackin_m_axi_weights_ARREADY) & (ap_ST_st11_fsm_10 == ap_CS_fsm)))) begin
        m_axi_weights_ARVALID = ap_const_logic_1;
    end else begin
        m_axi_weights_ARVALID = ap_const_logic_0;
    end
end

/// m_axi_weights_RREADY assign process. ///
always @ (ap_CS_fsm or m_axi_weights_RVALID)
begin
    if ((((ap_ST_st8_fsm_7 == ap_CS_fsm) & ~(m_axi_weights_RVALID == ap_const_logic_0)) | (~(m_axi_weights_RVALID == ap_const_logic_0) & (ap_ST_st16_fsm_15 == ap_CS_fsm)))) begin
        m_axi_weights_RREADY = ap_const_logic_1;
    end else begin
        m_axi_weights_RREADY = ap_const_logic_0;
    end
end

/// output_r_ce0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st10_fsm_9 == ap_CS_fsm)) begin
        output_r_ce0 = ap_const_logic_1;
    end else begin
        output_r_ce0 = ap_const_logic_0;
    end
end

/// output_r_we0 assign process. ///
always @ (ap_CS_fsm or exitcond_fu_214_p2)
begin
    if (((ap_ST_st10_fsm_9 == ap_CS_fsm) & ~(ap_const_lv1_0 == exitcond_fu_214_p2))) begin
        output_r_we0 = ap_const_logic_1;
    end else begin
        output_r_we0 = ap_const_logic_0;
    end
end
/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm or m_axi_weights_RVALID or exitcond1_fu_151_p2 or exitcond_fu_214_p2 or ap_sig_ioackin_m_axi_weights_ARREADY)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
        begin
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : 
        begin
            if (~(ap_const_lv1_0 == exitcond1_fu_151_p2)) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_weights_ARREADY)) begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st4_fsm_3 : 
        begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : 
        begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : 
        begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : 
        begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : 
        begin
            if (~(m_axi_weights_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st9_fsm_8 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        ap_ST_st10_fsm_9 : 
        begin
            if (~(ap_const_lv1_0 == exitcond_fu_214_p2)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st11_fsm_10 : 
        begin
            if (~(ap_const_logic_0 == ap_sig_ioackin_m_axi_weights_ARREADY)) begin
                ap_NS_fsm = ap_ST_st12_fsm_11;
            end else begin
                ap_NS_fsm = ap_ST_st11_fsm_10;
            end
        end
        ap_ST_st12_fsm_11 : 
        begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : 
        begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : 
        begin
            ap_NS_fsm = ap_ST_st15_fsm_14;
        end
        ap_ST_st15_fsm_14 : 
        begin
            ap_NS_fsm = ap_ST_st16_fsm_15;
        end
        ap_ST_st16_fsm_15 : 
        begin
            if (~(m_axi_weights_RVALID == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st17_fsm_16;
            end else begin
                ap_NS_fsm = ap_ST_st16_fsm_15;
            end
        end
        ap_ST_st17_fsm_16 : 
        begin
            ap_NS_fsm = ap_ST_st18_fsm_17;
        end
        ap_ST_st18_fsm_17 : 
        begin
            ap_NS_fsm = ap_ST_st19_fsm_18;
        end
        ap_ST_st19_fsm_18 : 
        begin
            ap_NS_fsm = ap_ST_st20_fsm_19;
        end
        ap_ST_st20_fsm_19 : 
        begin
            ap_NS_fsm = ap_ST_st21_fsm_20;
        end
        ap_ST_st21_fsm_20 : 
        begin
            ap_NS_fsm = ap_ST_st22_fsm_21;
        end
        ap_ST_st22_fsm_21 : 
        begin
            ap_NS_fsm = ap_ST_st23_fsm_22;
        end
        ap_ST_st23_fsm_22 : 
        begin
            ap_NS_fsm = ap_ST_st24_fsm_23;
        end
        ap_ST_st24_fsm_23 : 
        begin
            ap_NS_fsm = ap_ST_st25_fsm_24;
        end
        ap_ST_st25_fsm_24 : 
        begin
            ap_NS_fsm = ap_ST_st26_fsm_25;
        end
        ap_ST_st26_fsm_25 : 
        begin
            ap_NS_fsm = ap_ST_st27_fsm_26;
        end
        ap_ST_st27_fsm_26 : 
        begin
            ap_NS_fsm = ap_ST_st28_fsm_27;
        end
        ap_ST_st28_fsm_27 : 
        begin
            ap_NS_fsm = ap_ST_st10_fsm_9;
        end
        default : 
        begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign exitcond1_fu_151_p2 = (i_reg_106 == ap_const_lv4_A? 1'b1: 1'b0);
assign exitcond_fu_214_p2 = (j_reg_129 == ap_const_lv8_80? 1'b1: 1'b0);
assign grp_fu_142_ce = ap_const_logic_1;
assign grp_fu_142_p0 = sum4_reg_118;
assign grp_fu_142_p1 = tmp_3_reg_337;
assign grp_fu_147_ce = ap_const_logic_1;
assign grp_fu_147_p0 = input_load_reg_327;
assign grp_fu_147_p1 = bias_addr_1_read_reg_332;
assign i_5_fu_157_p2 = (i_reg_106 + ap_const_lv4_1);
assign input_r_address0 = tmp_s_fu_259_p1;
assign j_1_fu_220_p2 = (j_reg_129 + ap_const_lv8_1);
assign m_axi_weights_ARBURST = ap_const_lv2_0;
assign m_axi_weights_ARCACHE = ap_const_lv4_0;
assign m_axi_weights_ARID = ap_const_lv1_0;
assign m_axi_weights_ARLEN = ap_const_lv32_1;
assign m_axi_weights_ARLOCK = ap_const_lv2_0;
assign m_axi_weights_ARPROT = ap_const_lv3_0;
assign m_axi_weights_ARQOS = ap_const_lv4_0;
assign m_axi_weights_ARREGION = ap_const_lv4_0;
assign m_axi_weights_ARSIZE = ap_const_lv3_0;
assign m_axi_weights_ARUSER = ap_const_lv1_0;
assign m_axi_weights_AWADDR = ap_const_lv32_0;
assign m_axi_weights_AWBURST = ap_const_lv2_0;
assign m_axi_weights_AWCACHE = ap_const_lv4_0;
assign m_axi_weights_AWID = ap_const_lv1_0;
assign m_axi_weights_AWLEN = ap_const_lv32_0;
assign m_axi_weights_AWLOCK = ap_const_lv2_0;
assign m_axi_weights_AWPROT = ap_const_lv3_0;
assign m_axi_weights_AWQOS = ap_const_lv4_0;
assign m_axi_weights_AWREGION = ap_const_lv4_0;
assign m_axi_weights_AWSIZE = ap_const_lv3_0;
assign m_axi_weights_AWUSER = ap_const_lv1_0;
assign m_axi_weights_AWVALID = ap_const_logic_0;
assign m_axi_weights_BREADY = ap_const_logic_0;
assign m_axi_weights_WDATA = ap_const_lv32_0;
assign m_axi_weights_WID = ap_const_lv1_0;
assign m_axi_weights_WLAST = ap_const_logic_0;
assign m_axi_weights_WSTRB = ap_const_lv4_0;
assign m_axi_weights_WUSER = ap_const_lv1_0;
assign m_axi_weights_WVALID = ap_const_logic_0;

/// neural_network_dense_2_ap_rst assign process. ///
always @ (ap_rst_n)
begin
    neural_network_dense_2_ap_rst = ~ap_rst_n;
end
assign output_r_address0 = tmp_reg_293;
assign output_r_d0 = sum4_reg_118;
assign p_shl2_cast_fu_210_p1 = $unsigned(p_shl2_fu_202_p3);
assign p_shl2_fu_202_p3 = {{i_reg_106}, {ap_const_lv1_0}};
assign p_shl_cast_fu_198_p1 = $unsigned(p_shl_fu_190_p3);
assign p_shl_fu_190_p3 = {{i_reg_106}, {ap_const_lv3_0}};
assign sext4_cast_fu_167_p1 = $unsigned(dense_2_bias11);
assign sext_cast_fu_240_p1 = $unsigned(dense_2_weights9);
assign sum1_cast_fu_249_p1 = $unsigned(sum1_fu_243_p2);
assign sum1_fu_243_p2 = (sext_cast_fu_240_p1 + tmp_5_cast_cast_fu_236_p1);
assign sum5_cast_fu_176_p1 = $unsigned(sum5_fu_170_p2);
assign sum5_fu_170_p2 = (sext4_cast_fu_167_p1 + tmp_cast_fu_163_p1);
assign tmp1_fu_226_p2 = (p_shl2_cast_reg_303 + j_reg_129);
assign tmp_5_cast_cast_fu_236_p1 = $unsigned(tmp_5_fu_231_p2);
assign tmp_5_fu_231_p2 = (tmp1_fu_226_p2 + p_shl_cast_reg_298);
assign tmp_cast_fu_163_p1 = $unsigned(i_reg_106);
assign tmp_fu_186_p1 = $unsigned(i_reg_106);
assign tmp_s_fu_259_p1 = $unsigned(j_reg_129);
always @ (posedge ap_clk)
begin
    tmp_reg_293[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_shl_cast_reg_298[2:0] <= 3'b000;
    p_shl_cast_reg_298[7] <= 1'b0;
    p_shl2_cast_reg_303[0] <= 1'b0;
    p_shl2_cast_reg_303[7:5] <= 3'b000;
end



endmodule //neural_network_dense_2

