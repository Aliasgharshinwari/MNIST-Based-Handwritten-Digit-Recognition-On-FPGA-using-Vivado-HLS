-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library IEEE;
use IEEE.STD_LOGIC_1164.all;
use IEEE.NUMERIC_STD.all;

entity neural_network_AXILiteS_s_axi is
    generic (
        C_ADDR_WIDTH    : INTEGER := 6;
        C_DATA_WIDTH    : INTEGER := 32);
    port (
        -- axi4 lite slave signals
        ACLK :in   STD_LOGIC;
        ARESETN :in   STD_LOGIC;
        ACLK_EN :in   STD_LOGIC;
        AWADDR :in   STD_LOGIC_VECTOR(C_ADDR_WIDTH-1 downto 0);
        AWVALID :in   STD_LOGIC;
        AWREADY :out  STD_LOGIC;
        WDATA :in   STD_LOGIC_VECTOR(C_DATA_WIDTH-1 downto 0);
        WSTRB :in   STD_LOGIC_VECTOR(C_DATA_WIDTH/8-1 downto 0);
        WVALID :in   STD_LOGIC;
        WREADY :out  STD_LOGIC;
        BRESP :out  STD_LOGIC_VECTOR(1 downto 0);
        BVALID :out  STD_LOGIC;
        BREADY :in   STD_LOGIC;
        ARADDR :in   STD_LOGIC_VECTOR(C_ADDR_WIDTH-1 downto 0);
        ARVALID :in   STD_LOGIC;
        ARREADY :out  STD_LOGIC;
        RDATA :out  STD_LOGIC_VECTOR(C_DATA_WIDTH-1 downto 0);
        RRESP :out  STD_LOGIC_VECTOR(1 downto 0);
        RVALID :out  STD_LOGIC;
        RREADY :in   STD_LOGIC;
        -- user signals
        input_r :out  STD_LOGIC_VECTOR(31 downto 0);
        output_r :out  STD_LOGIC_VECTOR(31 downto 0);
        dense_1_weights :out  STD_LOGIC_VECTOR(31 downto 0);
        dense_1_bias :out  STD_LOGIC_VECTOR(31 downto 0);
        dense_2_weights :out  STD_LOGIC_VECTOR(31 downto 0);
        dense_2_bias :out  STD_LOGIC_VECTOR(31 downto 0));
end entity neural_network_AXILiteS_s_axi;

--------------------------Address Info-------------------
-- 0x00 : reserved
-- 0x04 : reserved
-- 0x08 : reserved
-- 0x0c : reserved
-- 0x10 : Data signal of input_r
--        bit 31~0 - input_r[31:0] (Read/Write)
-- 0x14 : reserved
-- 0x18 : Data signal of output_r
--        bit 31~0 - output_r[31:0] (Read/Write)
-- 0x1c : reserved
-- 0x20 : Data signal of dense_1_weights
--        bit 31~0 - dense_1_weights[31:0] (Read/Write)
-- 0x24 : reserved
-- 0x28 : Data signal of dense_1_bias
--        bit 31~0 - dense_1_bias[31:0] (Read/Write)
-- 0x2c : reserved
-- 0x30 : Data signal of dense_2_weights
--        bit 31~0 - dense_2_weights[31:0] (Read/Write)
-- 0x34 : reserved
-- 0x38 : Data signal of dense_2_bias
--        bit 31~0 - dense_2_bias[31:0] (Read/Write)
-- 0x3c : reserved
-- (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

architecture behave of neural_network_AXILiteS_s_axi is
    constant ADDR_BITS          : INTEGER   := 6;
    constant ADDR_INPUT_R_DATA_0 : INTEGER :=16#10#;
    constant ADDR_INPUT_R_CTRL : INTEGER :=16#14#;
    constant ADDR_OUTPUT_R_DATA_0 : INTEGER :=16#18#;
    constant ADDR_OUTPUT_R_CTRL : INTEGER :=16#1c#;
    constant ADDR_DENSE_1_WEIGHTS_DATA_0 : INTEGER :=16#20#;
    constant ADDR_DENSE_1_WEIGHTS_CTRL : INTEGER :=16#24#;
    constant ADDR_DENSE_1_BIAS_DATA_0 : INTEGER :=16#28#;
    constant ADDR_DENSE_1_BIAS_CTRL : INTEGER :=16#2c#;
    constant ADDR_DENSE_2_WEIGHTS_DATA_0 : INTEGER :=16#30#;
    constant ADDR_DENSE_2_WEIGHTS_CTRL : INTEGER :=16#34#;
    constant ADDR_DENSE_2_BIAS_DATA_0 : INTEGER :=16#38#;
    constant ADDR_DENSE_2_BIAS_CTRL : INTEGER :=16#3c#;
    type states is (wridle, wrdata, wrresp, rdidle, rddata);  -- read and write FSM states
    signal wstate, wnext, rstate, rnext: states;
    -- Local signal
    signal waddr : UNSIGNED(ADDR_BITS-1 downto 0);
    signal wmask : UNSIGNED(31 downto 0);
    signal aw_hs : STD_LOGIC;
    signal w_hs : STD_LOGIC;
    signal rdata_data : UNSIGNED(31 downto 0);
    signal ar_hs : STD_LOGIC;
    signal raddr : UNSIGNED(ADDR_BITS-1 downto 0);
    signal AWREADY_t : STD_LOGIC;
    signal WREADY_t : STD_LOGIC;
    signal ARREADY_t : STD_LOGIC;
    -- internal registers
    signal int_input_r : UNSIGNED(31 downto 0);
    signal int_output_r : UNSIGNED(31 downto 0);
    signal int_dense_1_weights : UNSIGNED(31 downto 0);
    signal int_dense_1_bias : UNSIGNED(31 downto 0);
    signal int_dense_2_weights : UNSIGNED(31 downto 0);
    signal int_dense_2_bias : UNSIGNED(31 downto 0);

begin
    -- axi write
    AWREADY_t <=  '1' when wstate = wridle else '0';
    AWREADY   <=  AWREADY_t;
    WREADY_t  <=  '1' when wstate = wrdata else '0';
    WREADY    <=  WREADY_t;
    BRESP     <=  "00";  -- OKAY
    BVALID    <=  '1' when wstate = wrresp else '0';
    wmask     <=  (31 downto 24 => WSTRB(3), 23 downto 16 => WSTRB(2), 15 downto 8 => WSTRB(1), 7 downto 0 => WSTRB(0));
    aw_hs     <=  AWVALID and AWREADY_t;
    w_hs      <=  WVALID and WREADY_t;

    -- write FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (ARESETN = '0') then
                wstate <= wridle;
            else
                wstate <= wnext;
            end if;
        end if;
    end process;

    process (wstate, AWVALID, WVALID, BREADY)
    begin
        case (wstate) is
        when wridle =>
            if (AWVALID = '1') then
                wnext <= wrdata;
            else
                wnext <= wridle;
            end if;
        when wrdata =>
            if (WVALID = '1') then
                wnext <= wrresp;
            else
                wnext <= wrdata;
            end if;
        when wrresp =>
            if (BREADY = '1') then
                wnext <= wridle;
            else
                wnext <= wrresp;
            end if;
        when others =>
            wnext <= wridle;
        end case;
    end process;

    waddr_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (aw_hs = '1') then
                waddr <= UNSIGNED(AWADDR(ADDR_BITS-1 downto 0));
            end if;
        end if;
    end process;

    -- axi read
    ARREADY_t <= '1' when (rstate = rdidle) else '0';
    ARREADY <= ARREADY_t;
    RDATA   <= STD_LOGIC_VECTOR(rdata_data);
    RRESP   <= "00";  -- OKAY
    RVALID  <= '1' when (rstate = rddata) else '0';
    ar_hs   <= ARVALID and ARREADY_t;
    raddr   <= UNSIGNED(ARADDR(ADDR_BITS-1 downto 0));

    -- read FSM
    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (ARESETN = '0') then
                rstate <= rdidle;
            else
                rstate <= rnext;
            end if;
        end if;
    end process;

    process (rstate, ARVALID, RREADY)
    begin
        case (rstate) is
        when rdidle =>
            if (ARVALID = '1') then
                rnext <= rddata;
            else
                rnext <= rdidle;
            end if;
        when rddata =>
            if (RREADY = '1') then
                rnext <= rdidle;
            else
                rnext <= rddata;
            end if;
        when others =>
            rnext <= rdidle;
        end case;
    end process;

    rdata_proc : process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
            if (ar_hs = '1') then
                case (TO_INTEGER(raddr)) is
                when ADDR_INPUT_R_DATA_0 =>
                    rdata_data <= RESIZE(int_input_r(31 downto 0), 32);
                when ADDR_OUTPUT_R_DATA_0 =>
                    rdata_data <= RESIZE(int_output_r(31 downto 0), 32);
                when ADDR_DENSE_1_WEIGHTS_DATA_0 =>
                    rdata_data <= RESIZE(int_dense_1_weights(31 downto 0), 32);
                when ADDR_DENSE_1_BIAS_DATA_0 =>
                    rdata_data <= RESIZE(int_dense_1_bias(31 downto 0), 32);
                when ADDR_DENSE_2_WEIGHTS_DATA_0 =>
                    rdata_data <= RESIZE(int_dense_2_weights(31 downto 0), 32);
                when ADDR_DENSE_2_BIAS_DATA_0 =>
                    rdata_data <= RESIZE(int_dense_2_bias(31 downto 0), 32);
                when others =>
                    rdata_data <= (others => '0');
                end case;
            end if;
        end if;
    end process;

    -- internal registers
    input_r <= STD_LOGIC_VECTOR(int_input_r);
    output_r <= STD_LOGIC_VECTOR(int_output_r);
    dense_1_weights <= STD_LOGIC_VECTOR(int_dense_1_weights);
    dense_1_bias <= STD_LOGIC_VECTOR(int_dense_1_bias);
    dense_2_weights <= STD_LOGIC_VECTOR(int_dense_2_weights);
    dense_2_bias <= STD_LOGIC_VECTOR(int_dense_2_bias);

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
             if (w_hs = '1' and waddr = ADDR_INPUT_R_DATA_0) then
                 int_input_r(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_input_r(31 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
             if (w_hs = '1' and waddr = ADDR_OUTPUT_R_DATA_0) then
                 int_output_r(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_output_r(31 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
             if (w_hs = '1' and waddr = ADDR_DENSE_1_WEIGHTS_DATA_0) then
                 int_dense_1_weights(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_dense_1_weights(31 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
             if (w_hs = '1' and waddr = ADDR_DENSE_1_BIAS_DATA_0) then
                 int_dense_1_bias(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_dense_1_bias(31 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
             if (w_hs = '1' and waddr = ADDR_DENSE_2_WEIGHTS_DATA_0) then
                 int_dense_2_weights(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_dense_2_weights(31 downto 0));
            end if;
        end if;
    end process;

    process (ACLK)
    begin
        if (ACLK'event and ACLK = '1') and ACLK_EN = '1' then
             if (w_hs = '1' and waddr = ADDR_DENSE_2_BIAS_DATA_0) then
                 int_dense_2_bias(31 downto 0) <= (UNSIGNED(WDATA(31 downto 0)) and wmask(31 downto 0)) or ((not wmask(31 downto 0)) and int_dense_2_bias(31 downto 0));
            end if;
        end if;
    end process;

end architecture behave;
