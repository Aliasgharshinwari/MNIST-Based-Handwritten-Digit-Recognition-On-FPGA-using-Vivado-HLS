-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of neural_network is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "neural_network,hls_ip_2014_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc6slx9csg324-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=2036121,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant C_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_80 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_ready : STD_LOGIC;
    signal input_r : STD_LOGIC_VECTOR (31 downto 0);
    signal output_r : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_weights : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_bias : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_weights : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_bias : STD_LOGIC_VECTOR (31 downto 0);
    signal neural_network_AXILiteS_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal neural_network_control_s_axi_U_ap_dummy_ce : STD_LOGIC;
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal neural_network_gmem_m_axi_U_ap_dummy_ce : STD_LOGIC;
    signal dense_1_bias7_reg_295 : STD_LOGIC_VECTOR (29 downto 0);
    signal dense_1_weights5_reg_300 : STD_LOGIC_VECTOR (29 downto 0);
    signal input1_reg_305 : STD_LOGIC_VECTOR (29 downto 0);
    signal dense_2_bias1_reg_310 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_neural_network_dense_1_fu_180_ap_done : STD_LOGIC;
    signal dense_2_weights9_reg_315 : STD_LOGIC_VECTOR (29 downto 0);
    signal output3_reg_320 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_fu_276_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_328 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_i_fu_282_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_reg_333 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_i_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dense_1_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_out_load_reg_343 : STD_LOGIC_VECTOR (31 downto 0);
    signal neural_network_ap_rst : STD_LOGIC;
    signal dense_1_out_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_1_out_ce0 : STD_LOGIC;
    signal dense_1_out_we0 : STD_LOGIC;
    signal dense_1_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_out_1_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal relu_out_1_ce0 : STD_LOGIC;
    signal relu_out_1_we0 : STD_LOGIC;
    signal relu_out_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal relu_out_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_2_out_ce0 : STD_LOGIC;
    signal dense_2_out_we0 : STD_LOGIC;
    signal dense_2_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_softmax_fu_172_ap_start : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_ap_done : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_ap_idle : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_ap_ready : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_softmax_fu_172_input_r_ce0 : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_input_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWVALID : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWREADY : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_WVALID : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_WREADY : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_WLAST : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARVALID : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARREADY : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_RVALID : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_RREADY : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_RLAST : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_BVALID : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_BREADY : STD_LOGIC;
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_m_axi_output_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_softmax_fu_172_output3 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_neural_network_dense_1_fu_180_ap_start : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_ap_idle : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_ap_ready : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWVALID : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWREADY : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_WVALID : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_WREADY : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_WLAST : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARVALID : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARREADY : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_RVALID : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_RREADY : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_RLAST : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_BVALID : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_BREADY : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_m_axi_input_r_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_1_fu_180_input1 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_neural_network_dense_1_fu_180_output_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_neural_network_dense_1_fu_180_output_r_ce0 : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_output_r_we0 : STD_LOGIC;
    signal grp_neural_network_dense_1_fu_180_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_1_fu_180_dense_1_weights5 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_neural_network_dense_1_fu_180_dense_1_bias7 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_neural_network_dense_2_fu_191_ap_start : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_ap_done : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_ap_idle : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_ap_ready : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_input_r_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_neural_network_dense_2_fu_191_input_r_ce0 : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_input_r_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_2_fu_191_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_2_fu_191_output_r_ce0 : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_output_r_we0 : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_output_r_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWVALID : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWREADY : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_WVALID : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_WREADY : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_WLAST : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARVALID : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARREADY : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARADDR : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_RVALID : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_RREADY : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_RLAST : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_BVALID : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_BREADY : STD_LOGIC;
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_m_axi_weights_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_neural_network_dense_2_fu_191_dense_2_weights9 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_neural_network_dense_2_fu_191_dense_2_bias11 : STD_LOGIC_VECTOR (29 downto 0);
    signal i_i_reg_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_neural_network_softmax_fu_172_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_neural_network_dense_1_fu_180_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_neural_network_dense_2_fu_191_ap_start_ap_start_reg : STD_LOGIC := '0';
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_201_ce : STD_LOGIC;
    signal grp_fu_201_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component neural_network_softmax IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst_n : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWVALID : OUT STD_LOGIC;
        m_axi_output_r_AWREADY : IN STD_LOGIC;
        m_axi_output_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WVALID : OUT STD_LOGIC;
        m_axi_output_r_WREADY : IN STD_LOGIC;
        m_axi_output_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_WLAST : OUT STD_LOGIC;
        m_axi_output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARVALID : OUT STD_LOGIC;
        m_axi_output_r_ARREADY : IN STD_LOGIC;
        m_axi_output_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RVALID : IN STD_LOGIC;
        m_axi_output_r_RREADY : OUT STD_LOGIC;
        m_axi_output_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_output_r_RLAST : IN STD_LOGIC;
        m_axi_output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BVALID : IN STD_LOGIC;
        m_axi_output_r_BREADY : OUT STD_LOGIC;
        m_axi_output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        output3 : IN STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component neural_network_dense_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst_n : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_input_r_AWVALID : OUT STD_LOGIC;
        m_axi_input_r_AWREADY : IN STD_LOGIC;
        m_axi_input_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WVALID : OUT STD_LOGIC;
        m_axi_input_r_WREADY : IN STD_LOGIC;
        m_axi_input_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_WLAST : OUT STD_LOGIC;
        m_axi_input_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARVALID : OUT STD_LOGIC;
        m_axi_input_r_ARREADY : IN STD_LOGIC;
        m_axi_input_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_input_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_input_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RVALID : IN STD_LOGIC;
        m_axi_input_r_RREADY : OUT STD_LOGIC;
        m_axi_input_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_input_r_RLAST : IN STD_LOGIC;
        m_axi_input_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BVALID : IN STD_LOGIC;
        m_axi_input_r_BREADY : OUT STD_LOGIC;
        m_axi_input_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_input_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_input_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input1 : IN STD_LOGIC_VECTOR (29 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_1_weights5 : IN STD_LOGIC_VECTOR (29 downto 0);
        dense_1_bias7 : IN STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component neural_network_dense_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst_n : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWVALID : OUT STD_LOGIC;
        m_axi_weights_AWREADY : IN STD_LOGIC;
        m_axi_weights_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WVALID : OUT STD_LOGIC;
        m_axi_weights_WREADY : IN STD_LOGIC;
        m_axi_weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_WLAST : OUT STD_LOGIC;
        m_axi_weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARVALID : OUT STD_LOGIC;
        m_axi_weights_ARREADY : IN STD_LOGIC;
        m_axi_weights_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RVALID : IN STD_LOGIC;
        m_axi_weights_RREADY : OUT STD_LOGIC;
        m_axi_weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_weights_RLAST : IN STD_LOGIC;
        m_axi_weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BVALID : IN STD_LOGIC;
        m_axi_weights_BREADY : OUT STD_LOGIC;
        m_axi_weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        dense_2_weights9 : IN STD_LOGIC_VECTOR (29 downto 0);
        dense_2_bias11 : IN STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component neural_network_fcmp_32ns_32ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component neural_network_dense_1_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neural_network_dense_2_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neural_network_AXILiteS_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_1_weights : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_1_bias : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_2_weights : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_2_bias : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neural_network_control_s_axi IS
    generic (
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component neural_network_gmem_m_axi IS
    generic (
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        C_ID_WIDTH : INTEGER;
        C_ADDR_WIDTH : INTEGER;
        C_DATA_WIDTH : INTEGER;
        C_AWUSER_WIDTH : INTEGER;
        C_ARUSER_WIDTH : INTEGER;
        C_WUSER_WIDTH : INTEGER;
        C_RUSER_WIDTH : INTEGER;
        C_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESETN : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    neural_network_AXILiteS_s_axi_U : component neural_network_AXILiteS_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => neural_network_AXILiteS_s_axi_U_ap_dummy_ce,
        input_r => input_r,
        output_r => output_r,
        dense_1_weights => dense_1_weights,
        dense_1_bias => dense_1_bias,
        dense_2_weights => dense_2_weights,
        dense_2_bias => dense_2_bias);

    neural_network_control_s_axi_U : component neural_network_control_s_axi
    generic map (
        C_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => neural_network_control_s_axi_U_ap_dummy_ce,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    neural_network_gmem_m_axi_U : component neural_network_gmem_m_axi
    generic map (
        USER_DW => 32,
        USER_AW => 32,
        USER_MAXREQS => 5,
        C_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESETN => ap_rst_n,
        ACLK_EN => neural_network_gmem_m_axi_U_ap_dummy_ce,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    dense_1_out_U : component neural_network_dense_1_out
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => neural_network_ap_rst,
        address0 => dense_1_out_address0,
        ce0 => dense_1_out_ce0,
        we0 => dense_1_out_we0,
        d0 => dense_1_out_d0,
        q0 => dense_1_out_q0);

    relu_out_1_U : component neural_network_dense_1_out
    generic map (
        DataWidth => 32,
        AddressRange => 128,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => neural_network_ap_rst,
        address0 => relu_out_1_address0,
        ce0 => relu_out_1_ce0,
        we0 => relu_out_1_we0,
        d0 => relu_out_1_d0,
        q0 => relu_out_1_q0);

    dense_2_out_U : component neural_network_dense_2_out
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => neural_network_ap_rst,
        address0 => dense_2_out_address0,
        ce0 => dense_2_out_ce0,
        we0 => dense_2_out_we0,
        d0 => dense_2_out_d0,
        q0 => dense_2_out_q0);

    grp_neural_network_softmax_fu_172 : component neural_network_softmax
    port map (
        ap_clk => ap_clk,
        ap_rst_n => ap_rst_n,
        ap_start => grp_neural_network_softmax_fu_172_ap_start,
        ap_done => grp_neural_network_softmax_fu_172_ap_done,
        ap_idle => grp_neural_network_softmax_fu_172_ap_idle,
        ap_ready => grp_neural_network_softmax_fu_172_ap_ready,
        input_r_address0 => grp_neural_network_softmax_fu_172_input_r_address0,
        input_r_ce0 => grp_neural_network_softmax_fu_172_input_r_ce0,
        input_r_q0 => grp_neural_network_softmax_fu_172_input_r_q0,
        m_axi_output_r_AWVALID => grp_neural_network_softmax_fu_172_m_axi_output_r_AWVALID,
        m_axi_output_r_AWREADY => grp_neural_network_softmax_fu_172_m_axi_output_r_AWREADY,
        m_axi_output_r_AWADDR => grp_neural_network_softmax_fu_172_m_axi_output_r_AWADDR,
        m_axi_output_r_AWID => grp_neural_network_softmax_fu_172_m_axi_output_r_AWID,
        m_axi_output_r_AWLEN => grp_neural_network_softmax_fu_172_m_axi_output_r_AWLEN,
        m_axi_output_r_AWSIZE => grp_neural_network_softmax_fu_172_m_axi_output_r_AWSIZE,
        m_axi_output_r_AWBURST => grp_neural_network_softmax_fu_172_m_axi_output_r_AWBURST,
        m_axi_output_r_AWLOCK => grp_neural_network_softmax_fu_172_m_axi_output_r_AWLOCK,
        m_axi_output_r_AWCACHE => grp_neural_network_softmax_fu_172_m_axi_output_r_AWCACHE,
        m_axi_output_r_AWPROT => grp_neural_network_softmax_fu_172_m_axi_output_r_AWPROT,
        m_axi_output_r_AWQOS => grp_neural_network_softmax_fu_172_m_axi_output_r_AWQOS,
        m_axi_output_r_AWREGION => grp_neural_network_softmax_fu_172_m_axi_output_r_AWREGION,
        m_axi_output_r_AWUSER => grp_neural_network_softmax_fu_172_m_axi_output_r_AWUSER,
        m_axi_output_r_WVALID => grp_neural_network_softmax_fu_172_m_axi_output_r_WVALID,
        m_axi_output_r_WREADY => grp_neural_network_softmax_fu_172_m_axi_output_r_WREADY,
        m_axi_output_r_WDATA => grp_neural_network_softmax_fu_172_m_axi_output_r_WDATA,
        m_axi_output_r_WSTRB => grp_neural_network_softmax_fu_172_m_axi_output_r_WSTRB,
        m_axi_output_r_WLAST => grp_neural_network_softmax_fu_172_m_axi_output_r_WLAST,
        m_axi_output_r_WID => grp_neural_network_softmax_fu_172_m_axi_output_r_WID,
        m_axi_output_r_WUSER => grp_neural_network_softmax_fu_172_m_axi_output_r_WUSER,
        m_axi_output_r_ARVALID => grp_neural_network_softmax_fu_172_m_axi_output_r_ARVALID,
        m_axi_output_r_ARREADY => grp_neural_network_softmax_fu_172_m_axi_output_r_ARREADY,
        m_axi_output_r_ARADDR => grp_neural_network_softmax_fu_172_m_axi_output_r_ARADDR,
        m_axi_output_r_ARID => grp_neural_network_softmax_fu_172_m_axi_output_r_ARID,
        m_axi_output_r_ARLEN => grp_neural_network_softmax_fu_172_m_axi_output_r_ARLEN,
        m_axi_output_r_ARSIZE => grp_neural_network_softmax_fu_172_m_axi_output_r_ARSIZE,
        m_axi_output_r_ARBURST => grp_neural_network_softmax_fu_172_m_axi_output_r_ARBURST,
        m_axi_output_r_ARLOCK => grp_neural_network_softmax_fu_172_m_axi_output_r_ARLOCK,
        m_axi_output_r_ARCACHE => grp_neural_network_softmax_fu_172_m_axi_output_r_ARCACHE,
        m_axi_output_r_ARPROT => grp_neural_network_softmax_fu_172_m_axi_output_r_ARPROT,
        m_axi_output_r_ARQOS => grp_neural_network_softmax_fu_172_m_axi_output_r_ARQOS,
        m_axi_output_r_ARREGION => grp_neural_network_softmax_fu_172_m_axi_output_r_ARREGION,
        m_axi_output_r_ARUSER => grp_neural_network_softmax_fu_172_m_axi_output_r_ARUSER,
        m_axi_output_r_RVALID => grp_neural_network_softmax_fu_172_m_axi_output_r_RVALID,
        m_axi_output_r_RREADY => grp_neural_network_softmax_fu_172_m_axi_output_r_RREADY,
        m_axi_output_r_RDATA => grp_neural_network_softmax_fu_172_m_axi_output_r_RDATA,
        m_axi_output_r_RLAST => grp_neural_network_softmax_fu_172_m_axi_output_r_RLAST,
        m_axi_output_r_RID => grp_neural_network_softmax_fu_172_m_axi_output_r_RID,
        m_axi_output_r_RUSER => grp_neural_network_softmax_fu_172_m_axi_output_r_RUSER,
        m_axi_output_r_RRESP => grp_neural_network_softmax_fu_172_m_axi_output_r_RRESP,
        m_axi_output_r_BVALID => grp_neural_network_softmax_fu_172_m_axi_output_r_BVALID,
        m_axi_output_r_BREADY => grp_neural_network_softmax_fu_172_m_axi_output_r_BREADY,
        m_axi_output_r_BRESP => grp_neural_network_softmax_fu_172_m_axi_output_r_BRESP,
        m_axi_output_r_BID => grp_neural_network_softmax_fu_172_m_axi_output_r_BID,
        m_axi_output_r_BUSER => grp_neural_network_softmax_fu_172_m_axi_output_r_BUSER,
        output3 => grp_neural_network_softmax_fu_172_output3);

    grp_neural_network_dense_1_fu_180 : component neural_network_dense_1
    port map (
        ap_clk => ap_clk,
        ap_rst_n => ap_rst_n,
        ap_start => grp_neural_network_dense_1_fu_180_ap_start,
        ap_done => grp_neural_network_dense_1_fu_180_ap_done,
        ap_idle => grp_neural_network_dense_1_fu_180_ap_idle,
        ap_ready => grp_neural_network_dense_1_fu_180_ap_ready,
        m_axi_input_r_AWVALID => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWADDR,
        m_axi_input_r_AWID => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWID,
        m_axi_input_r_AWLEN => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER => grp_neural_network_dense_1_fu_180_m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID => grp_neural_network_dense_1_fu_180_m_axi_input_r_WVALID,
        m_axi_input_r_WREADY => grp_neural_network_dense_1_fu_180_m_axi_input_r_WREADY,
        m_axi_input_r_WDATA => grp_neural_network_dense_1_fu_180_m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB => grp_neural_network_dense_1_fu_180_m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST => grp_neural_network_dense_1_fu_180_m_axi_input_r_WLAST,
        m_axi_input_r_WID => grp_neural_network_dense_1_fu_180_m_axi_input_r_WID,
        m_axi_input_r_WUSER => grp_neural_network_dense_1_fu_180_m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARADDR,
        m_axi_input_r_ARID => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARID,
        m_axi_input_r_ARLEN => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER => grp_neural_network_dense_1_fu_180_m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID => grp_neural_network_dense_1_fu_180_m_axi_input_r_RVALID,
        m_axi_input_r_RREADY => grp_neural_network_dense_1_fu_180_m_axi_input_r_RREADY,
        m_axi_input_r_RDATA => grp_neural_network_dense_1_fu_180_m_axi_input_r_RDATA,
        m_axi_input_r_RLAST => grp_neural_network_dense_1_fu_180_m_axi_input_r_RLAST,
        m_axi_input_r_RID => grp_neural_network_dense_1_fu_180_m_axi_input_r_RID,
        m_axi_input_r_RUSER => grp_neural_network_dense_1_fu_180_m_axi_input_r_RUSER,
        m_axi_input_r_RRESP => grp_neural_network_dense_1_fu_180_m_axi_input_r_RRESP,
        m_axi_input_r_BVALID => grp_neural_network_dense_1_fu_180_m_axi_input_r_BVALID,
        m_axi_input_r_BREADY => grp_neural_network_dense_1_fu_180_m_axi_input_r_BREADY,
        m_axi_input_r_BRESP => grp_neural_network_dense_1_fu_180_m_axi_input_r_BRESP,
        m_axi_input_r_BID => grp_neural_network_dense_1_fu_180_m_axi_input_r_BID,
        m_axi_input_r_BUSER => grp_neural_network_dense_1_fu_180_m_axi_input_r_BUSER,
        input1 => grp_neural_network_dense_1_fu_180_input1,
        output_r_address0 => grp_neural_network_dense_1_fu_180_output_r_address0,
        output_r_ce0 => grp_neural_network_dense_1_fu_180_output_r_ce0,
        output_r_we0 => grp_neural_network_dense_1_fu_180_output_r_we0,
        output_r_d0 => grp_neural_network_dense_1_fu_180_output_r_d0,
        dense_1_weights5 => grp_neural_network_dense_1_fu_180_dense_1_weights5,
        dense_1_bias7 => grp_neural_network_dense_1_fu_180_dense_1_bias7);

    grp_neural_network_dense_2_fu_191 : component neural_network_dense_2
    port map (
        ap_clk => ap_clk,
        ap_rst_n => ap_rst_n,
        ap_start => grp_neural_network_dense_2_fu_191_ap_start,
        ap_done => grp_neural_network_dense_2_fu_191_ap_done,
        ap_idle => grp_neural_network_dense_2_fu_191_ap_idle,
        ap_ready => grp_neural_network_dense_2_fu_191_ap_ready,
        input_r_address0 => grp_neural_network_dense_2_fu_191_input_r_address0,
        input_r_ce0 => grp_neural_network_dense_2_fu_191_input_r_ce0,
        input_r_q0 => grp_neural_network_dense_2_fu_191_input_r_q0,
        output_r_address0 => grp_neural_network_dense_2_fu_191_output_r_address0,
        output_r_ce0 => grp_neural_network_dense_2_fu_191_output_r_ce0,
        output_r_we0 => grp_neural_network_dense_2_fu_191_output_r_we0,
        output_r_d0 => grp_neural_network_dense_2_fu_191_output_r_d0,
        m_axi_weights_AWVALID => grp_neural_network_dense_2_fu_191_m_axi_weights_AWVALID,
        m_axi_weights_AWREADY => grp_neural_network_dense_2_fu_191_m_axi_weights_AWREADY,
        m_axi_weights_AWADDR => grp_neural_network_dense_2_fu_191_m_axi_weights_AWADDR,
        m_axi_weights_AWID => grp_neural_network_dense_2_fu_191_m_axi_weights_AWID,
        m_axi_weights_AWLEN => grp_neural_network_dense_2_fu_191_m_axi_weights_AWLEN,
        m_axi_weights_AWSIZE => grp_neural_network_dense_2_fu_191_m_axi_weights_AWSIZE,
        m_axi_weights_AWBURST => grp_neural_network_dense_2_fu_191_m_axi_weights_AWBURST,
        m_axi_weights_AWLOCK => grp_neural_network_dense_2_fu_191_m_axi_weights_AWLOCK,
        m_axi_weights_AWCACHE => grp_neural_network_dense_2_fu_191_m_axi_weights_AWCACHE,
        m_axi_weights_AWPROT => grp_neural_network_dense_2_fu_191_m_axi_weights_AWPROT,
        m_axi_weights_AWQOS => grp_neural_network_dense_2_fu_191_m_axi_weights_AWQOS,
        m_axi_weights_AWREGION => grp_neural_network_dense_2_fu_191_m_axi_weights_AWREGION,
        m_axi_weights_AWUSER => grp_neural_network_dense_2_fu_191_m_axi_weights_AWUSER,
        m_axi_weights_WVALID => grp_neural_network_dense_2_fu_191_m_axi_weights_WVALID,
        m_axi_weights_WREADY => grp_neural_network_dense_2_fu_191_m_axi_weights_WREADY,
        m_axi_weights_WDATA => grp_neural_network_dense_2_fu_191_m_axi_weights_WDATA,
        m_axi_weights_WSTRB => grp_neural_network_dense_2_fu_191_m_axi_weights_WSTRB,
        m_axi_weights_WLAST => grp_neural_network_dense_2_fu_191_m_axi_weights_WLAST,
        m_axi_weights_WID => grp_neural_network_dense_2_fu_191_m_axi_weights_WID,
        m_axi_weights_WUSER => grp_neural_network_dense_2_fu_191_m_axi_weights_WUSER,
        m_axi_weights_ARVALID => grp_neural_network_dense_2_fu_191_m_axi_weights_ARVALID,
        m_axi_weights_ARREADY => grp_neural_network_dense_2_fu_191_m_axi_weights_ARREADY,
        m_axi_weights_ARADDR => grp_neural_network_dense_2_fu_191_m_axi_weights_ARADDR,
        m_axi_weights_ARID => grp_neural_network_dense_2_fu_191_m_axi_weights_ARID,
        m_axi_weights_ARLEN => grp_neural_network_dense_2_fu_191_m_axi_weights_ARLEN,
        m_axi_weights_ARSIZE => grp_neural_network_dense_2_fu_191_m_axi_weights_ARSIZE,
        m_axi_weights_ARBURST => grp_neural_network_dense_2_fu_191_m_axi_weights_ARBURST,
        m_axi_weights_ARLOCK => grp_neural_network_dense_2_fu_191_m_axi_weights_ARLOCK,
        m_axi_weights_ARCACHE => grp_neural_network_dense_2_fu_191_m_axi_weights_ARCACHE,
        m_axi_weights_ARPROT => grp_neural_network_dense_2_fu_191_m_axi_weights_ARPROT,
        m_axi_weights_ARQOS => grp_neural_network_dense_2_fu_191_m_axi_weights_ARQOS,
        m_axi_weights_ARREGION => grp_neural_network_dense_2_fu_191_m_axi_weights_ARREGION,
        m_axi_weights_ARUSER => grp_neural_network_dense_2_fu_191_m_axi_weights_ARUSER,
        m_axi_weights_RVALID => grp_neural_network_dense_2_fu_191_m_axi_weights_RVALID,
        m_axi_weights_RREADY => grp_neural_network_dense_2_fu_191_m_axi_weights_RREADY,
        m_axi_weights_RDATA => grp_neural_network_dense_2_fu_191_m_axi_weights_RDATA,
        m_axi_weights_RLAST => grp_neural_network_dense_2_fu_191_m_axi_weights_RLAST,
        m_axi_weights_RID => grp_neural_network_dense_2_fu_191_m_axi_weights_RID,
        m_axi_weights_RUSER => grp_neural_network_dense_2_fu_191_m_axi_weights_RUSER,
        m_axi_weights_RRESP => grp_neural_network_dense_2_fu_191_m_axi_weights_RRESP,
        m_axi_weights_BVALID => grp_neural_network_dense_2_fu_191_m_axi_weights_BVALID,
        m_axi_weights_BREADY => grp_neural_network_dense_2_fu_191_m_axi_weights_BREADY,
        m_axi_weights_BRESP => grp_neural_network_dense_2_fu_191_m_axi_weights_BRESP,
        m_axi_weights_BID => grp_neural_network_dense_2_fu_191_m_axi_weights_BID,
        m_axi_weights_BUSER => grp_neural_network_dense_2_fu_191_m_axi_weights_BUSER,
        dense_2_weights9 => grp_neural_network_dense_2_fu_191_dense_2_weights9,
        dense_2_bias11 => grp_neural_network_dense_2_fu_191_dense_2_bias11);

    neural_network_fcmp_32ns_32ns_1_3_U22 : component neural_network_fcmp_32ns_32ns_1_3
    generic map (
        ID => 22,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => neural_network_ap_rst,
        din0 => grp_fu_201_p0,
        din1 => grp_fu_201_p1,
        ce => grp_fu_201_ce,
        opcode => grp_fu_201_opcode,
        dout => grp_fu_201_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- grp_neural_network_dense_1_fu_180_ap_start_ap_start_reg assign process. --
    grp_neural_network_dense_1_fu_180_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                grp_neural_network_dense_1_fu_180_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                    grp_neural_network_dense_1_fu_180_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_neural_network_dense_1_fu_180_ap_ready)) then 
                    grp_neural_network_dense_1_fu_180_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_neural_network_dense_2_fu_191_ap_start_ap_start_reg assign process. --
    grp_neural_network_dense_2_fu_191_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                grp_neural_network_dense_2_fu_191_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0)))) then 
                    grp_neural_network_dense_2_fu_191_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_neural_network_dense_2_fu_191_ap_ready)) then 
                    grp_neural_network_dense_2_fu_191_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- grp_neural_network_softmax_fu_172_ap_start_ap_start_reg assign process. --
    grp_neural_network_softmax_fu_172_ap_start_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                grp_neural_network_softmax_fu_172_ap_start_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_ST_st8_fsm_7 = ap_CS_fsm)) then 
                    grp_neural_network_softmax_fu_172_ap_start_ap_start_reg <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_neural_network_softmax_fu_172_ap_ready)) then 
                    grp_neural_network_softmax_fu_172_ap_start_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- i_i_reg_160 assign process. --
    i_i_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                i_i_reg_160 <= i_reg_328;
            elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_neural_network_dense_1_fu_180_ap_done)))) then 
                i_i_reg_160 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then
                dense_1_bias7_reg_295 <= dense_1_bias(31 downto 2);
                dense_1_weights5_reg_300 <= dense_1_weights(31 downto 2);
                input1_reg_305 <= input_r(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                dense_1_out_load_reg_343 <= dense_1_out_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((ap_const_logic_0 = grp_neural_network_dense_1_fu_180_ap_done)))) then
                dense_2_bias1_reg_310 <= dense_2_bias(31 downto 2);
                dense_2_weights9_reg_315 <= dense_2_weights(31 downto 2);
                output3_reg_320 <= output_r(31 downto 2);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                i_reg_328 <= i_fu_276_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond_i_fu_270_p2 = ap_const_lv1_0))) then
                tmp_i_reg_333(0) <= tmp_i_fu_282_p1(0);
    tmp_i_reg_333(1) <= tmp_i_fu_282_p1(1);
    tmp_i_reg_333(2) <= tmp_i_fu_282_p1(2);
    tmp_i_reg_333(3) <= tmp_i_fu_282_p1(3);
    tmp_i_reg_333(4) <= tmp_i_fu_282_p1(4);
    tmp_i_reg_333(5) <= tmp_i_fu_282_p1(5);
    tmp_i_reg_333(6) <= tmp_i_fu_282_p1(6);
    tmp_i_reg_333(7) <= tmp_i_fu_282_p1(7);
            end if;
        end if;
    end process;
    tmp_i_reg_333(63 downto 8) <= "00000000000000000000000000000000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, grp_neural_network_dense_1_fu_180_ap_done, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_ap_done, grp_neural_network_dense_2_fu_191_ap_done)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if (not((ap_const_logic_0 = grp_neural_network_dense_1_fu_180_ap_done))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_logic_0 = grp_neural_network_dense_2_fu_191_ap_done))) then
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_logic_0 = grp_neural_network_softmax_fu_172_ap_done))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st9_fsm_8;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, grp_neural_network_softmax_fu_172_ap_done)
    begin
        if (((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ap_const_logic_0 = grp_neural_network_softmax_fu_172_ap_done)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, grp_neural_network_softmax_fu_172_ap_done)
    begin
        if (((ap_ST_st9_fsm_8 = ap_CS_fsm) and not((ap_const_logic_0 = grp_neural_network_softmax_fu_172_ap_done)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- dense_1_out_address0 assign process. --
    dense_1_out_address0_assign_proc : process(ap_CS_fsm, tmp_i_fu_282_p1, grp_neural_network_dense_1_fu_180_output_r_address0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            dense_1_out_address0 <= tmp_i_fu_282_p1(7 - 1 downto 0);
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            dense_1_out_address0 <= grp_neural_network_dense_1_fu_180_output_r_address0;
        else 
            dense_1_out_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- dense_1_out_ce0 assign process. --
    dense_1_out_ce0_assign_proc : process(ap_CS_fsm, grp_neural_network_dense_1_fu_180_output_r_ce0)
    begin
        if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            dense_1_out_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            dense_1_out_ce0 <= grp_neural_network_dense_1_fu_180_output_r_ce0;
        else 
            dense_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_d0 <= grp_neural_network_dense_1_fu_180_output_r_d0;

    -- dense_1_out_we0 assign process. --
    dense_1_out_we0_assign_proc : process(ap_CS_fsm, grp_neural_network_dense_1_fu_180_output_r_we0)
    begin
        if ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
            dense_1_out_we0 <= grp_neural_network_dense_1_fu_180_output_r_we0;
        else 
            dense_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- dense_2_out_address0 assign process. --
    dense_2_out_address0_assign_proc : process(ap_CS_fsm, grp_neural_network_softmax_fu_172_input_r_address0, grp_neural_network_dense_2_fu_191_output_r_address0)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            dense_2_out_address0 <= grp_neural_network_dense_2_fu_191_output_r_address0;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            dense_2_out_address0 <= grp_neural_network_softmax_fu_172_input_r_address0;
        else 
            dense_2_out_address0 <= "XXXX";
        end if; 
    end process;


    -- dense_2_out_ce0 assign process. --
    dense_2_out_ce0_assign_proc : process(ap_CS_fsm, grp_neural_network_softmax_fu_172_input_r_ce0, grp_neural_network_dense_2_fu_191_output_r_ce0)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            dense_2_out_ce0 <= grp_neural_network_dense_2_fu_191_output_r_ce0;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            dense_2_out_ce0 <= grp_neural_network_softmax_fu_172_input_r_ce0;
        else 
            dense_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_out_d0 <= grp_neural_network_dense_2_fu_191_output_r_d0;

    -- dense_2_out_we0 assign process. --
    dense_2_out_we0_assign_proc : process(ap_CS_fsm, grp_neural_network_dense_2_fu_191_output_r_we0)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            dense_2_out_we0 <= grp_neural_network_dense_2_fu_191_output_r_we0;
        else 
            dense_2_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_i_fu_270_p2 <= "1" when (i_i_reg_160 = ap_const_lv8_80) else "0";

    -- gmem_ARADDR assign process. --
    gmem_ARADDR_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARADDR, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARADDR, grp_neural_network_dense_2_fu_191_m_axi_weights_ARADDR)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARADDR <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARADDR;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARADDR <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARADDR;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARADDR <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- gmem_ARBURST assign process. --
    gmem_ARBURST_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARBURST, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARBURST, grp_neural_network_dense_2_fu_191_m_axi_weights_ARBURST)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARBURST <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARBURST;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARBURST <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARBURST;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARBURST <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARBURST;
        else 
            gmem_ARBURST <= "XX";
        end if; 
    end process;


    -- gmem_ARCACHE assign process. --
    gmem_ARCACHE_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARCACHE, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARCACHE, grp_neural_network_dense_2_fu_191_m_axi_weights_ARCACHE)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARCACHE <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARCACHE;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARCACHE <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARCACHE;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARCACHE <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARCACHE;
        else 
            gmem_ARCACHE <= "XXXX";
        end if; 
    end process;


    -- gmem_ARID assign process. --
    gmem_ARID_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARID, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARID, grp_neural_network_dense_2_fu_191_m_axi_weights_ARID)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARID <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARID;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARID <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARID;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARID <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARID;
        else 
            gmem_ARID <= "X";
        end if; 
    end process;


    -- gmem_ARLEN assign process. --
    gmem_ARLEN_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARLEN, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARLEN, grp_neural_network_dense_2_fu_191_m_axi_weights_ARLEN)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARLEN <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARLEN;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARLEN <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARLEN;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARLEN <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- gmem_ARLOCK assign process. --
    gmem_ARLOCK_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARLOCK, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARLOCK, grp_neural_network_dense_2_fu_191_m_axi_weights_ARLOCK)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARLOCK <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARLOCK;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARLOCK <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARLOCK;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARLOCK <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARLOCK;
        else 
            gmem_ARLOCK <= "XX";
        end if; 
    end process;


    -- gmem_ARPROT assign process. --
    gmem_ARPROT_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARPROT, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARPROT, grp_neural_network_dense_2_fu_191_m_axi_weights_ARPROT)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARPROT <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARPROT;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARPROT <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARPROT;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARPROT <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARPROT;
        else 
            gmem_ARPROT <= "XXX";
        end if; 
    end process;


    -- gmem_ARQOS assign process. --
    gmem_ARQOS_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARQOS, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARQOS, grp_neural_network_dense_2_fu_191_m_axi_weights_ARQOS)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARQOS <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARQOS;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARQOS <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARQOS;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARQOS <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARQOS;
        else 
            gmem_ARQOS <= "XXXX";
        end if; 
    end process;


    -- gmem_ARREGION assign process. --
    gmem_ARREGION_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARREGION, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARREGION, grp_neural_network_dense_2_fu_191_m_axi_weights_ARREGION)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARREGION <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARREGION;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARREGION <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARREGION;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARREGION <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARREGION;
        else 
            gmem_ARREGION <= "XXXX";
        end if; 
    end process;


    -- gmem_ARSIZE assign process. --
    gmem_ARSIZE_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARSIZE, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARSIZE, grp_neural_network_dense_2_fu_191_m_axi_weights_ARSIZE)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARSIZE <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARSIZE;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARSIZE <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARSIZE;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARSIZE <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARSIZE;
        else 
            gmem_ARSIZE <= "XXX";
        end if; 
    end process;


    -- gmem_ARUSER assign process. --
    gmem_ARUSER_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARUSER, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARUSER, grp_neural_network_dense_2_fu_191_m_axi_weights_ARUSER)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARUSER <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARUSER;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARUSER <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARUSER;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARUSER <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARUSER;
        else 
            gmem_ARUSER <= "X";
        end if; 
    end process;


    -- gmem_ARVALID assign process. --
    gmem_ARVALID_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_ARVALID, grp_neural_network_dense_1_fu_180_m_axi_input_r_ARVALID, grp_neural_network_dense_2_fu_191_m_axi_weights_ARVALID)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_ARVALID <= grp_neural_network_dense_2_fu_191_m_axi_weights_ARVALID;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_ARVALID <= grp_neural_network_dense_1_fu_180_m_axi_input_r_ARVALID;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_ARVALID <= grp_neural_network_softmax_fu_172_m_axi_output_r_ARVALID;
        else 
            gmem_ARVALID <= 'X';
        end if; 
    end process;

    gmem_AWADDR <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWADDR;
    gmem_AWBURST <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWBURST;
    gmem_AWCACHE <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWCACHE;
    gmem_AWID <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWID;
    gmem_AWLEN <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWLEN;
    gmem_AWLOCK <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWLOCK;
    gmem_AWPROT <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWPROT;
    gmem_AWQOS <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWQOS;
    gmem_AWREGION <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWREGION;
    gmem_AWSIZE <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWSIZE;
    gmem_AWUSER <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWUSER;
    gmem_AWVALID <= grp_neural_network_softmax_fu_172_m_axi_output_r_AWVALID;
    gmem_BREADY <= grp_neural_network_softmax_fu_172_m_axi_output_r_BREADY;

    -- gmem_RREADY assign process. --
    gmem_RREADY_assign_proc : process(ap_CS_fsm, exitcond_i_fu_270_p2, grp_neural_network_softmax_fu_172_m_axi_output_r_RREADY, grp_neural_network_dense_1_fu_180_m_axi_input_r_RREADY, grp_neural_network_dense_2_fu_191_m_axi_weights_RREADY)
    begin
        if ((((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond_i_fu_270_p2 = ap_const_lv1_0))) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            gmem_RREADY <= grp_neural_network_dense_2_fu_191_m_axi_weights_RREADY;
        elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) or (ap_ST_st2_fsm_1 = ap_CS_fsm))) then 
            gmem_RREADY <= grp_neural_network_dense_1_fu_180_m_axi_input_r_RREADY;
        elsif (((ap_ST_st8_fsm_7 = ap_CS_fsm) or (ap_ST_st9_fsm_8 = ap_CS_fsm))) then 
            gmem_RREADY <= grp_neural_network_softmax_fu_172_m_axi_output_r_RREADY;
        else 
            gmem_RREADY <= 'X';
        end if; 
    end process;

    gmem_WDATA <= grp_neural_network_softmax_fu_172_m_axi_output_r_WDATA;
    gmem_WID <= grp_neural_network_softmax_fu_172_m_axi_output_r_WID;
    gmem_WLAST <= grp_neural_network_softmax_fu_172_m_axi_output_r_WLAST;
    gmem_WSTRB <= grp_neural_network_softmax_fu_172_m_axi_output_r_WSTRB;
    gmem_WUSER <= grp_neural_network_softmax_fu_172_m_axi_output_r_WUSER;
    gmem_WVALID <= grp_neural_network_softmax_fu_172_m_axi_output_r_WVALID;
    grp_fu_201_ce <= ap_const_logic_1;
    grp_fu_201_opcode <= ap_const_lv5_2;
    grp_fu_201_p0 <= dense_1_out_q0;
    grp_fu_201_p1 <= ap_const_lv32_0;
    grp_neural_network_dense_1_fu_180_ap_start <= grp_neural_network_dense_1_fu_180_ap_start_ap_start_reg;
    grp_neural_network_dense_1_fu_180_dense_1_bias7 <= dense_1_bias7_reg_295;
    grp_neural_network_dense_1_fu_180_dense_1_weights5 <= dense_1_weights5_reg_300;
    grp_neural_network_dense_1_fu_180_input1 <= input1_reg_305;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_ARREADY <= gmem_ARREADY;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_AWREADY <= ap_const_logic_0;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_BID <= ap_const_lv1_0;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_BRESP <= ap_const_lv2_0;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_BUSER <= ap_const_lv1_0;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_BVALID <= ap_const_logic_0;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_RDATA <= gmem_RDATA;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_RID <= gmem_RID;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_RLAST <= gmem_RLAST;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_RRESP <= gmem_RRESP;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_RUSER <= gmem_RUSER;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_RVALID <= gmem_RVALID;
    grp_neural_network_dense_1_fu_180_m_axi_input_r_WREADY <= ap_const_logic_0;
    grp_neural_network_dense_2_fu_191_ap_start <= grp_neural_network_dense_2_fu_191_ap_start_ap_start_reg;
    grp_neural_network_dense_2_fu_191_dense_2_bias11 <= dense_2_bias1_reg_310;
    grp_neural_network_dense_2_fu_191_dense_2_weights9 <= dense_2_weights9_reg_315;
    grp_neural_network_dense_2_fu_191_input_r_q0 <= relu_out_1_q0;
    grp_neural_network_dense_2_fu_191_m_axi_weights_ARREADY <= gmem_ARREADY;
    grp_neural_network_dense_2_fu_191_m_axi_weights_AWREADY <= ap_const_logic_0;
    grp_neural_network_dense_2_fu_191_m_axi_weights_BID <= ap_const_lv1_0;
    grp_neural_network_dense_2_fu_191_m_axi_weights_BRESP <= ap_const_lv2_0;
    grp_neural_network_dense_2_fu_191_m_axi_weights_BUSER <= ap_const_lv1_0;
    grp_neural_network_dense_2_fu_191_m_axi_weights_BVALID <= ap_const_logic_0;
    grp_neural_network_dense_2_fu_191_m_axi_weights_RDATA <= gmem_RDATA;
    grp_neural_network_dense_2_fu_191_m_axi_weights_RID <= gmem_RID;
    grp_neural_network_dense_2_fu_191_m_axi_weights_RLAST <= gmem_RLAST;
    grp_neural_network_dense_2_fu_191_m_axi_weights_RRESP <= gmem_RRESP;
    grp_neural_network_dense_2_fu_191_m_axi_weights_RUSER <= gmem_RUSER;
    grp_neural_network_dense_2_fu_191_m_axi_weights_RVALID <= gmem_RVALID;
    grp_neural_network_dense_2_fu_191_m_axi_weights_WREADY <= ap_const_logic_0;
    grp_neural_network_softmax_fu_172_ap_start <= grp_neural_network_softmax_fu_172_ap_start_ap_start_reg;
    grp_neural_network_softmax_fu_172_input_r_q0 <= dense_2_out_q0;
    grp_neural_network_softmax_fu_172_m_axi_output_r_ARREADY <= gmem_ARREADY;
    grp_neural_network_softmax_fu_172_m_axi_output_r_AWREADY <= gmem_AWREADY;
    grp_neural_network_softmax_fu_172_m_axi_output_r_BID <= gmem_BID;
    grp_neural_network_softmax_fu_172_m_axi_output_r_BRESP <= gmem_BRESP;
    grp_neural_network_softmax_fu_172_m_axi_output_r_BUSER <= gmem_BUSER;
    grp_neural_network_softmax_fu_172_m_axi_output_r_BVALID <= gmem_BVALID;
    grp_neural_network_softmax_fu_172_m_axi_output_r_RDATA <= gmem_RDATA;
    grp_neural_network_softmax_fu_172_m_axi_output_r_RID <= gmem_RID;
    grp_neural_network_softmax_fu_172_m_axi_output_r_RLAST <= gmem_RLAST;
    grp_neural_network_softmax_fu_172_m_axi_output_r_RRESP <= gmem_RRESP;
    grp_neural_network_softmax_fu_172_m_axi_output_r_RUSER <= gmem_RUSER;
    grp_neural_network_softmax_fu_172_m_axi_output_r_RVALID <= gmem_RVALID;
    grp_neural_network_softmax_fu_172_m_axi_output_r_WREADY <= gmem_WREADY;
    grp_neural_network_softmax_fu_172_output3 <= output3_reg_320;
    i_fu_276_p2 <= std_logic_vector(unsigned(i_i_reg_160) + unsigned(ap_const_lv8_1));
    neural_network_AXILiteS_s_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- neural_network_ap_rst assign process. --
    neural_network_ap_rst_assign_proc : process(ap_rst_n)
    begin
                neural_network_ap_rst <= not(ap_rst_n);
    end process;

    neural_network_control_s_axi_U_ap_dummy_ce <= ap_const_logic_1;
    neural_network_gmem_m_axi_U_ap_dummy_ce <= ap_const_logic_1;

    -- relu_out_1_address0 assign process. --
    relu_out_1_address0_assign_proc : process(ap_CS_fsm, tmp_i_reg_333, grp_neural_network_dense_2_fu_191_input_r_address0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            relu_out_1_address0 <= tmp_i_reg_333(7 - 1 downto 0);
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            relu_out_1_address0 <= grp_neural_network_dense_2_fu_191_input_r_address0;
        else 
            relu_out_1_address0 <= "XXXXXXX";
        end if; 
    end process;


    -- relu_out_1_ce0 assign process. --
    relu_out_1_ce0_assign_proc : process(ap_CS_fsm, grp_neural_network_dense_2_fu_191_input_r_ce0)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            relu_out_1_ce0 <= ap_const_logic_1;
        elsif ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            relu_out_1_ce0 <= grp_neural_network_dense_2_fu_191_input_r_ce0;
        else 
            relu_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    relu_out_1_d0 <= 
        dense_1_out_load_reg_343 when (grp_fu_201_p2(0) = '1') else 
        ap_const_lv32_0;

    -- relu_out_1_we0 assign process. --
    relu_out_1_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st6_fsm_5 = ap_CS_fsm))) then 
            relu_out_1_we0 <= ap_const_logic_1;
        else 
            relu_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_fu_282_p1 <= std_logic_vector(resize(unsigned(i_i_reg_160),64));
end behav;
