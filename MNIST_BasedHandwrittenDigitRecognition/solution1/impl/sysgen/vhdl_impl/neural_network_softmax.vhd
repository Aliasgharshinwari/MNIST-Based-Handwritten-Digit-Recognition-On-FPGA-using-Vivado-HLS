-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2014.2
-- Copyright (C) 2014 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity neural_network_softmax is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_r_AWVALID : OUT STD_LOGIC;
    m_axi_output_r_AWREADY : IN STD_LOGIC;
    m_axi_output_r_AWADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_r_WVALID : OUT STD_LOGIC;
    m_axi_output_r_WREADY : IN STD_LOGIC;
    m_axi_output_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_WLAST : OUT STD_LOGIC;
    m_axi_output_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_r_ARVALID : OUT STD_LOGIC;
    m_axi_output_r_ARREADY : IN STD_LOGIC;
    m_axi_output_r_ARADDR : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_output_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_output_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_r_RVALID : IN STD_LOGIC;
    m_axi_output_r_RREADY : OUT STD_LOGIC;
    m_axi_output_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_output_r_RLAST : IN STD_LOGIC;
    m_axi_output_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_BVALID : IN STD_LOGIC;
    m_axi_output_r_BREADY : OUT STD_LOGIC;
    m_axi_output_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_output_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_output_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    output3 : IN STD_LOGIC_VECTOR (29 downto 0) );
end;


architecture behav of neural_network_softmax is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (6 downto 0) := "0000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (6 downto 0) := "0000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (6 downto 0) := "0000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (6 downto 0) := "0001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (6 downto 0) := "0001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (6 downto 0) := "0001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (6 downto 0) := "0001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (6 downto 0) := "0001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (6 downto 0) := "0001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (6 downto 0) := "0010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (6 downto 0) := "0010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (6 downto 0) := "0010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (6 downto 0) := "0010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (6 downto 0) := "0010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (6 downto 0) := "0010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (6 downto 0) := "0010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (6 downto 0) := "0011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (6 downto 0) := "0011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (6 downto 0) := "0011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (6 downto 0) := "0011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (6 downto 0) := "0011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (6 downto 0) := "0011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (6 downto 0) := "0011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (6 downto 0) := "0011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (6 downto 0) := "0100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (6 downto 0) := "0100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (6 downto 0) := "0100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (6 downto 0) := "0100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (6 downto 0) := "0100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (6 downto 0) := "0100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (6 downto 0) := "0100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (6 downto 0) := "0101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (6 downto 0) := "0101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (6 downto 0) := "0101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (6 downto 0) := "0101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (6 downto 0) := "0101100";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (6 downto 0) := "0101101";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (6 downto 0) := "0101110";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (6 downto 0) := "0101111";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (6 downto 0) := "0110000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (6 downto 0) := "0110001";
    constant ap_ST_st51_fsm_50 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_ST_st52_fsm_51 : STD_LOGIC_VECTOR (6 downto 0) := "0110011";
    constant ap_ST_st53_fsm_52 : STD_LOGIC_VECTOR (6 downto 0) := "0110100";
    constant ap_ST_st54_fsm_53 : STD_LOGIC_VECTOR (6 downto 0) := "0110101";
    constant ap_ST_st55_fsm_54 : STD_LOGIC_VECTOR (6 downto 0) := "0110110";
    constant ap_ST_st56_fsm_55 : STD_LOGIC_VECTOR (6 downto 0) := "0110111";
    constant ap_ST_st57_fsm_56 : STD_LOGIC_VECTOR (6 downto 0) := "0111000";
    constant ap_ST_st58_fsm_57 : STD_LOGIC_VECTOR (6 downto 0) := "0111001";
    constant ap_ST_st59_fsm_58 : STD_LOGIC_VECTOR (6 downto 0) := "0111010";
    constant ap_ST_st60_fsm_59 : STD_LOGIC_VECTOR (6 downto 0) := "0111011";
    constant ap_ST_st61_fsm_60 : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_ST_st62_fsm_61 : STD_LOGIC_VECTOR (6 downto 0) := "0111101";
    constant ap_ST_st63_fsm_62 : STD_LOGIC_VECTOR (6 downto 0) := "0111110";
    constant ap_ST_st64_fsm_63 : STD_LOGIC_VECTOR (6 downto 0) := "0111111";
    constant ap_ST_st65_fsm_64 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_ST_st66_fsm_65 : STD_LOGIC_VECTOR (6 downto 0) := "1000001";
    constant ap_ST_st67_fsm_66 : STD_LOGIC_VECTOR (6 downto 0) := "1000010";
    constant ap_ST_st68_fsm_67 : STD_LOGIC_VECTOR (6 downto 0) := "1000011";
    constant ap_ST_st69_fsm_68 : STD_LOGIC_VECTOR (6 downto 0) := "1000100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal reg_220 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_226 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_fu_243_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_366 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_val_2_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_val_1_fu_249_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_fu_262_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_3_reg_385 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond1_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_cast_fu_273_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_6_cast_reg_395 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_193_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_assign_reg_400 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_4_fu_288_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_4_reg_413 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_i_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_1_reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal term_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_fu_318_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_447 : STD_LOGIC_VECTOR (3 downto 0);
    signal output_addr_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_addr_read_reg_458 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_100 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_val1_reg_111 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_121 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal result_0_i_reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal term_0_i_reg_158 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_0_i_reg_170 : STD_LOGIC_VECTOR (3 downto 0);
    signal i2_reg_181 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_238_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum1_cast_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum4_cast_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_output_r_AWREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_output_r_AWREADY : STD_LOGIC;
    signal ap_sig_ioackin_m_axi_output_r_WREADY : STD_LOGIC;
    signal ap_reg_ioackin_m_axi_output_r_WREADY : STD_LOGIC := '0';
    signal ap_reg_ioackin_m_axi_output_r_ARREADY : STD_LOGIC := '0';
    signal ap_sig_ioackin_m_axi_output_r_ARREADY : STD_LOGIC;
    signal grp_fu_193_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_cast_fu_294_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum1_fu_297_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal sext3_cast_fu_328_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_8_cast_fu_324_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal sum4_fu_331_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal neural_network_softmax_ap_rst : STD_LOGIC;
    signal grp_fu_193_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_193_ce : STD_LOGIC;
    signal grp_fu_201_ce : STD_LOGIC;
    signal grp_fu_206_ce : STD_LOGIC;
    signal grp_fu_211_ce : STD_LOGIC;
    signal grp_fu_214_ce : STD_LOGIC;
    signal grp_fu_214_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component neural_network_faddfsub_32ns_32ns_32_5_no_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neural_network_fmul_32ns_32ns_32_7_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neural_network_fdiv_32ns_32ns_32_12 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neural_network_sitofp_32ns_32_5 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component neural_network_fcmp_32ns_32ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    neural_network_faddfsub_32ns_32ns_32_5_no_dsp_U14 : component neural_network_faddfsub_32ns_32ns_32_5_no_dsp
    generic map (
        ID => 14,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => neural_network_softmax_ap_rst,
        din0 => grp_fu_193_p0,
        din1 => grp_fu_193_p1,
        opcode => grp_fu_193_opcode,
        ce => grp_fu_193_ce,
        dout => grp_fu_193_p2);

    neural_network_fmul_32ns_32ns_32_7_max_dsp_U15 : component neural_network_fmul_32ns_32ns_32_7_max_dsp
    generic map (
        ID => 15,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => neural_network_softmax_ap_rst,
        din0 => grp_fu_201_p0,
        din1 => grp_fu_201_p1,
        ce => grp_fu_201_ce,
        dout => grp_fu_201_p2);

    neural_network_fdiv_32ns_32ns_32_12_U16 : component neural_network_fdiv_32ns_32ns_32_12
    generic map (
        ID => 16,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => neural_network_softmax_ap_rst,
        din0 => grp_fu_206_p0,
        din1 => grp_fu_206_p1,
        ce => grp_fu_206_ce,
        dout => grp_fu_206_p2);

    neural_network_sitofp_32ns_32_5_U17 : component neural_network_sitofp_32ns_32_5
    generic map (
        ID => 17,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => neural_network_softmax_ap_rst,
        din0 => grp_fu_211_p0,
        ce => grp_fu_211_ce,
        dout => grp_fu_211_p1);

    neural_network_fcmp_32ns_32ns_1_3_U18 : component neural_network_fcmp_32ns_32ns_1_3
    generic map (
        ID => 18,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => neural_network_softmax_ap_rst,
        din0 => grp_fu_214_p0,
        din1 => grp_fu_214_p1,
        ce => grp_fu_214_ce,
        opcode => grp_fu_214_opcode,
        dout => grp_fu_214_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_output_r_ARREADY assign process. --
    ap_reg_ioackin_m_axi_output_r_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_axi_output_r_ARREADY <= ap_const_logic_0;
            else
                if ((ap_ST_st48_fsm_47 = ap_CS_fsm)) then
                    if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_ARREADY))) then 
                        ap_reg_ioackin_m_axi_output_r_ARREADY <= ap_const_logic_0;
                    elsif ((ap_const_logic_1 = m_axi_output_r_ARREADY)) then 
                        ap_reg_ioackin_m_axi_output_r_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_output_r_AWREADY assign process. --
    ap_reg_ioackin_m_axi_output_r_AWREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_axi_output_r_AWREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st43_fsm_42 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_WREADY))) and (ap_ST_st66_fsm_65 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_axi_output_r_AWREADY <= ap_const_logic_0;
                elsif ((((ap_const_logic_1 = m_axi_output_r_AWREADY) and (ap_ST_st43_fsm_42 = ap_CS_fsm)) or ((ap_const_logic_1 = m_axi_output_r_AWREADY) and (ap_ST_st66_fsm_65 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_axi_output_r_AWREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ioackin_m_axi_output_r_WREADY assign process. --
    ap_reg_ioackin_m_axi_output_r_WREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n = '0') then
                ap_reg_ioackin_m_axi_output_r_WREADY <= ap_const_logic_0;
            else
                if ((((ap_ST_st43_fsm_42 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_WREADY)))) or (not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_WREADY))) and (ap_ST_st66_fsm_65 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_axi_output_r_WREADY <= ap_const_logic_0;
                elsif ((((ap_ST_st43_fsm_42 = ap_CS_fsm) and (ap_const_logic_1 = m_axi_output_r_WREADY)) or ((ap_const_logic_1 = m_axi_output_r_WREADY) and (ap_ST_st66_fsm_65 = ap_CS_fsm)))) then 
                    ap_reg_ioackin_m_axi_output_r_WREADY <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- i1_reg_133 assign process. --
    i1_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond2_fu_232_p2 = ap_const_lv1_0)))) then 
                i1_reg_133 <= ap_const_lv4_0;
            elsif (((ap_ST_st46_fsm_45 = ap_CS_fsm) and not((m_axi_output_r_BVALID = ap_const_logic_0)))) then 
                i1_reg_133 <= i_3_reg_385;
            end if; 
        end if;
    end process;

    -- i2_reg_181 assign process. --
    i2_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_256_p2)))) then 
                i2_reg_181 <= ap_const_lv4_0;
            elsif ((not((m_axi_output_r_BVALID = ap_const_logic_0)) and (ap_ST_st69_fsm_68 = ap_CS_fsm))) then 
                i2_reg_181 <= i_2_reg_447;
            end if; 
        end if;
    end process;

    -- i_0_i_reg_170 assign process. --
    i_0_i_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st42_fsm_41 = ap_CS_fsm)) then 
                i_0_i_reg_170 <= i_4_reg_413;
            elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                i_0_i_reg_170 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    -- i_reg_100 assign process. --
    i_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                i_reg_100 <= i_1_reg_366;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                i_reg_100 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;

    -- max_val1_reg_111 assign process. --
    max_val1_reg_111_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                max_val1_reg_111 <= max_val_1_fu_249_p3;
            elsif ((ap_ST_st2_fsm_1 = ap_CS_fsm)) then 
                max_val1_reg_111 <= input_r_q0;
            end if; 
        end if;
    end process;

    -- result_0_i_reg_145 assign process. --
    result_0_i_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st42_fsm_41 = ap_CS_fsm)) then 
                result_0_i_reg_145 <= grp_fu_193_p2;
            elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                result_0_i_reg_145 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    -- sum_reg_121 assign process. --
    sum_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not((exitcond2_fu_232_p2 = ap_const_lv1_0)))) then 
                sum_reg_121 <= ap_const_lv32_0;
            elsif (((ap_ST_st46_fsm_45 = ap_CS_fsm) and not((m_axi_output_r_BVALID = ap_const_logic_0)))) then 
                sum_reg_121 <= grp_fu_193_p2;
            end if; 
        end if;
    end process;

    -- term_0_i_reg_158 assign process. --
    term_0_i_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st42_fsm_41 = ap_CS_fsm)) then 
                term_0_i_reg_158 <= term_reg_428;
            elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
                term_0_i_reg_158 <= ap_const_lv32_3F800000;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and (exitcond2_fu_232_p2 = ap_const_lv1_0))) then
                i_1_reg_366 <= i_1_fu_243_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st47_fsm_46 = ap_CS_fsm)) then
                i_2_reg_447 <= i_2_fu_318_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                i_3_reg_385 <= i_3_fu_262_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_i_fu_282_p2))) then
                i_4_reg_413 <= i_4_fu_288_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                max_val_2_reg_371 <= input_r_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i_fu_282_p2)))) then
                output_addr_1_reg_418 <= sum1_cast_fu_302_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st53_fsm_52 = ap_CS_fsm) and not((m_axi_output_r_RVALID = ap_const_logic_0)))) then
                output_addr_read_reg_458 <= m_axi_output_r_RDATA;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st47_fsm_46 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_312_p2))) then
                output_addr_reg_452 <= sum4_cast_fu_337_p1(32 - 1 downto 0);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) or (ap_ST_st8_fsm_7 = ap_CS_fsm))) then
                reg_220 <= input_r_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st30_fsm_29 = ap_CS_fsm) or (ap_ST_st65_fsm_64 = ap_CS_fsm))) then
                reg_226 <= grp_fu_206_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st37_fsm_36 = ap_CS_fsm)) then
                term_reg_428 <= grp_fu_201_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then
                tmp_6_cast_reg_395(0) <= tmp_6_cast_fu_273_p1(0);
    tmp_6_cast_reg_395(1) <= tmp_6_cast_fu_273_p1(1);
    tmp_6_cast_reg_395(2) <= tmp_6_cast_fu_273_p1(2);
    tmp_6_cast_reg_395(3) <= tmp_6_cast_fu_273_p1(3);
                x_assign_reg_400 <= grp_fu_193_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st18_fsm_17 = ap_CS_fsm)) then
                tmp_s_reg_423 <= grp_fu_211_p1;
            end if;
        end if;
    end process;
    tmp_6_cast_reg_395(32 downto 4) <= "00000000000000000000000000000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, m_axi_output_r_RVALID, m_axi_output_r_BVALID, exitcond2_fu_232_p2, exitcond1_fu_256_p2, exitcond_i_fu_282_p2, exitcond_fu_312_p2, ap_sig_ioackin_m_axi_output_r_AWREADY, ap_sig_ioackin_m_axi_output_r_WREADY, ap_sig_ioackin_m_axi_output_r_ARREADY)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                if (not((exitcond2_fu_232_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st7_fsm_6 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_256_p2))) then
                    ap_NS_fsm <= ap_ST_st47_fsm_46;
                else
                    ap_NS_fsm <= ap_ST_st8_fsm_7;
                end if;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                if (not((ap_const_lv1_0 = exitcond_i_fu_282_p2))) then
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_st15_fsm_14;
                end if;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st43_fsm_42 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st44_fsm_43;
                else
                    ap_NS_fsm <= ap_ST_st43_fsm_42;
                end if;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st46_fsm_45;
            when ap_ST_st46_fsm_45 => 
                if (not((m_axi_output_r_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st46_fsm_45;
                end if;
            when ap_ST_st47_fsm_46 => 
                if (not((ap_const_lv1_0 = exitcond_fu_312_p2))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                end if;
            when ap_ST_st48_fsm_47 => 
                if (not((ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_ARREADY))) then
                    ap_NS_fsm <= ap_ST_st49_fsm_48;
                else
                    ap_NS_fsm <= ap_ST_st48_fsm_47;
                end if;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st51_fsm_50;
            when ap_ST_st51_fsm_50 => 
                ap_NS_fsm <= ap_ST_st52_fsm_51;
            when ap_ST_st52_fsm_51 => 
                ap_NS_fsm <= ap_ST_st53_fsm_52;
            when ap_ST_st53_fsm_52 => 
                if (not((m_axi_output_r_RVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st54_fsm_53;
                else
                    ap_NS_fsm <= ap_ST_st53_fsm_52;
                end if;
            when ap_ST_st54_fsm_53 => 
                ap_NS_fsm <= ap_ST_st55_fsm_54;
            when ap_ST_st55_fsm_54 => 
                ap_NS_fsm <= ap_ST_st56_fsm_55;
            when ap_ST_st56_fsm_55 => 
                ap_NS_fsm <= ap_ST_st57_fsm_56;
            when ap_ST_st57_fsm_56 => 
                ap_NS_fsm <= ap_ST_st58_fsm_57;
            when ap_ST_st58_fsm_57 => 
                ap_NS_fsm <= ap_ST_st59_fsm_58;
            when ap_ST_st59_fsm_58 => 
                ap_NS_fsm <= ap_ST_st60_fsm_59;
            when ap_ST_st60_fsm_59 => 
                ap_NS_fsm <= ap_ST_st61_fsm_60;
            when ap_ST_st61_fsm_60 => 
                ap_NS_fsm <= ap_ST_st62_fsm_61;
            when ap_ST_st62_fsm_61 => 
                ap_NS_fsm <= ap_ST_st63_fsm_62;
            when ap_ST_st63_fsm_62 => 
                ap_NS_fsm <= ap_ST_st64_fsm_63;
            when ap_ST_st64_fsm_63 => 
                ap_NS_fsm <= ap_ST_st65_fsm_64;
            when ap_ST_st65_fsm_64 => 
                ap_NS_fsm <= ap_ST_st66_fsm_65;
            when ap_ST_st66_fsm_65 => 
                if (not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_WREADY)))) then
                    ap_NS_fsm <= ap_ST_st67_fsm_66;
                else
                    ap_NS_fsm <= ap_ST_st66_fsm_65;
                end if;
            when ap_ST_st67_fsm_66 => 
                ap_NS_fsm <= ap_ST_st68_fsm_67;
            when ap_ST_st68_fsm_67 => 
                ap_NS_fsm <= ap_ST_st69_fsm_68;
            when ap_ST_st69_fsm_68 => 
                if (not((m_axi_output_r_BVALID = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st47_fsm_46;
                else
                    ap_NS_fsm <= ap_ST_st69_fsm_68;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_start, ap_CS_fsm, exitcond_fu_312_p2)
    begin
        if (((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm)) or ((ap_ST_st47_fsm_46 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_312_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, exitcond_fu_312_p2)
    begin
        if (((ap_ST_st47_fsm_46 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_312_p2)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_output_r_ARREADY assign process. --
    ap_sig_ioackin_m_axi_output_r_ARREADY_assign_proc : process(m_axi_output_r_ARREADY, ap_reg_ioackin_m_axi_output_r_ARREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_ARREADY)) then 
            ap_sig_ioackin_m_axi_output_r_ARREADY <= m_axi_output_r_ARREADY;
        else 
            ap_sig_ioackin_m_axi_output_r_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_output_r_AWREADY assign process. --
    ap_sig_ioackin_m_axi_output_r_AWREADY_assign_proc : process(m_axi_output_r_AWREADY, ap_reg_ioackin_m_axi_output_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_AWREADY)) then 
            ap_sig_ioackin_m_axi_output_r_AWREADY <= m_axi_output_r_AWREADY;
        else 
            ap_sig_ioackin_m_axi_output_r_AWREADY <= ap_const_logic_1;
        end if; 
    end process;


    -- ap_sig_ioackin_m_axi_output_r_WREADY assign process. --
    ap_sig_ioackin_m_axi_output_r_WREADY_assign_proc : process(m_axi_output_r_WREADY, ap_reg_ioackin_m_axi_output_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_WREADY)) then 
            ap_sig_ioackin_m_axi_output_r_WREADY <= m_axi_output_r_WREADY;
        else 
            ap_sig_ioackin_m_axi_output_r_WREADY <= ap_const_logic_1;
        end if; 
    end process;

    exitcond1_fu_256_p2 <= "1" when (i1_reg_133 = ap_const_lv4_A) else "0";
    exitcond2_fu_232_p2 <= "1" when (i_reg_100 = ap_const_lv4_A) else "0";
    exitcond_fu_312_p2 <= "1" when (i2_reg_181 = ap_const_lv4_A) else "0";
    exitcond_i_fu_282_p2 <= "1" when (i_0_i_reg_170 = ap_const_lv4_A) else "0";

    -- grp_fu_193_ce assign process. --
    grp_fu_193_ce_assign_proc : process(ap_CS_fsm, m_axi_output_r_BVALID, exitcond_i_fu_282_p2, ap_sig_ioackin_m_axi_output_r_AWREADY, ap_sig_ioackin_m_axi_output_r_WREADY)
    begin
        if (((ap_ST_st13_fsm_12 = ap_CS_fsm) or ((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i_fu_282_p2))) or (ap_ST_st42_fsm_41 = ap_CS_fsm) or ((ap_ST_st46_fsm_45 = ap_CS_fsm) and not((m_axi_output_r_BVALID = ap_const_logic_0))) or ((ap_ST_st43_fsm_42 = ap_CS_fsm) and not(((ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_AWREADY) or (ap_const_logic_0 = ap_sig_ioackin_m_axi_output_r_WREADY)))) or (ap_ST_st9_fsm_8 = ap_CS_fsm) or (ap_ST_st38_fsm_37 = ap_CS_fsm) or (ap_ST_st10_fsm_9 = ap_CS_fsm) or (ap_ST_st11_fsm_10 = ap_CS_fsm) or (ap_ST_st12_fsm_11 = ap_CS_fsm) or (ap_ST_st44_fsm_43 = ap_CS_fsm) or (ap_ST_st45_fsm_44 = ap_CS_fsm) or (ap_ST_st39_fsm_38 = ap_CS_fsm) or (ap_ST_st40_fsm_39 = ap_CS_fsm) or (ap_ST_st41_fsm_40 = ap_CS_fsm))) then 
            grp_fu_193_ce <= ap_const_logic_1;
        else 
            grp_fu_193_ce <= ap_const_logic_0;
        end if; 
    end process;


    -- grp_fu_193_opcode assign process. --
    grp_fu_193_opcode_assign_proc : process(ap_CS_fsm, exitcond_i_fu_282_p2)
    begin
        if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            grp_fu_193_opcode <= ap_const_lv2_1;
        elsif ((((ap_ST_st14_fsm_13 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i_fu_282_p2))) or (ap_ST_st38_fsm_37 = ap_CS_fsm))) then 
            grp_fu_193_opcode <= ap_const_lv2_0;
        else 
            grp_fu_193_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_193_p0 assign process. --
    grp_fu_193_p0_assign_proc : process(ap_CS_fsm, reg_220, sum_reg_121, result_0_i_reg_145)
    begin
        if ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then 
            grp_fu_193_p0 <= result_0_i_reg_145;
        elsif ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            grp_fu_193_p0 <= sum_reg_121;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            grp_fu_193_p0 <= reg_220;
        else 
            grp_fu_193_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_193_p1 assign process. --
    grp_fu_193_p1_assign_proc : process(ap_CS_fsm, term_reg_428, max_val1_reg_111, result_0_i_reg_145)
    begin
        if ((ap_ST_st38_fsm_37 = ap_CS_fsm)) then 
            grp_fu_193_p1 <= term_reg_428;
        elsif ((ap_ST_st14_fsm_13 = ap_CS_fsm)) then 
            grp_fu_193_p1 <= result_0_i_reg_145;
        elsif ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then 
            grp_fu_193_p1 <= max_val1_reg_111;
        else 
            grp_fu_193_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_201_ce <= ap_const_logic_1;
    grp_fu_201_p0 <= term_0_i_reg_158;
    grp_fu_201_p1 <= reg_226;
    grp_fu_206_ce <= ap_const_logic_1;

    -- grp_fu_206_p0 assign process. --
    grp_fu_206_p0_assign_proc : process(ap_CS_fsm, x_assign_reg_400, output_addr_read_reg_458)
    begin
        if ((ap_ST_st54_fsm_53 = ap_CS_fsm)) then 
            grp_fu_206_p0 <= output_addr_read_reg_458;
        elsif ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            grp_fu_206_p0 <= x_assign_reg_400;
        else 
            grp_fu_206_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_206_p1 assign process. --
    grp_fu_206_p1_assign_proc : process(ap_CS_fsm, tmp_s_reg_423, sum_reg_121)
    begin
        if ((ap_ST_st54_fsm_53 = ap_CS_fsm)) then 
            grp_fu_206_p1 <= sum_reg_121;
        elsif ((ap_ST_st19_fsm_18 = ap_CS_fsm)) then 
            grp_fu_206_p1 <= tmp_s_reg_423;
        else 
            grp_fu_206_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_211_ce <= ap_const_logic_1;
    grp_fu_211_p0 <= std_logic_vector(resize(unsigned(i_0_i_reg_170),32));
    grp_fu_214_ce <= ap_const_logic_1;
    grp_fu_214_opcode <= ap_const_lv5_2;
    grp_fu_214_p0 <= input_r_q0;
    grp_fu_214_p1 <= max_val1_reg_111;
    i_1_fu_243_p2 <= std_logic_vector(unsigned(i_reg_100) + unsigned(ap_const_lv4_1));
    i_2_fu_318_p2 <= std_logic_vector(unsigned(i2_reg_181) + unsigned(ap_const_lv4_1));
    i_3_fu_262_p2 <= std_logic_vector(unsigned(i1_reg_133) + unsigned(ap_const_lv4_1));
    i_4_fu_288_p2 <= std_logic_vector(unsigned(i_0_i_reg_170) + unsigned(ap_const_lv4_1));

    -- input_r_address0 assign process. --
    input_r_address0_assign_proc : process(ap_CS_fsm, tmp_fu_238_p1, tmp_6_fu_268_p1)
    begin
        if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
            input_r_address0 <= tmp_6_fu_268_p1(4 - 1 downto 0);
        elsif ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then 
            input_r_address0 <= tmp_fu_238_p1(4 - 1 downto 0);
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            input_r_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            input_r_address0 <= "XXXX";
        end if; 
    end process;


    -- input_r_ce0 assign process. --
    input_r_ce0_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or (ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_output_r_ARADDR <= output_addr_reg_452;
    m_axi_output_r_ARBURST <= ap_const_lv2_0;
    m_axi_output_r_ARCACHE <= ap_const_lv4_0;
    m_axi_output_r_ARID <= ap_const_lv1_0;
    m_axi_output_r_ARLEN <= ap_const_lv32_1;
    m_axi_output_r_ARLOCK <= ap_const_lv2_0;
    m_axi_output_r_ARPROT <= ap_const_lv3_0;
    m_axi_output_r_ARQOS <= ap_const_lv4_0;
    m_axi_output_r_ARREGION <= ap_const_lv4_0;
    m_axi_output_r_ARSIZE <= ap_const_lv3_0;
    m_axi_output_r_ARUSER <= ap_const_lv1_0;

    -- m_axi_output_r_ARVALID assign process. --
    m_axi_output_r_ARVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_m_axi_output_r_ARREADY)
    begin
        if (((ap_ST_st48_fsm_47 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_ARREADY))) then 
            m_axi_output_r_ARVALID <= ap_const_logic_1;
        else 
            m_axi_output_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_output_r_AWADDR assign process. --
    m_axi_output_r_AWADDR_assign_proc : process(ap_CS_fsm, output_addr_1_reg_418, output_addr_reg_452, ap_reg_ioackin_m_axi_output_r_AWREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_AWREADY)) then
            if ((ap_ST_st66_fsm_65 = ap_CS_fsm)) then 
                m_axi_output_r_AWADDR <= output_addr_reg_452;
            elsif ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then 
                m_axi_output_r_AWADDR <= output_addr_1_reg_418;
            else 
                m_axi_output_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_output_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_output_r_AWBURST <= ap_const_lv2_0;
    m_axi_output_r_AWCACHE <= ap_const_lv4_0;
    m_axi_output_r_AWID <= ap_const_lv1_0;
    m_axi_output_r_AWLEN <= ap_const_lv32_1;
    m_axi_output_r_AWLOCK <= ap_const_lv2_0;
    m_axi_output_r_AWPROT <= ap_const_lv3_0;
    m_axi_output_r_AWQOS <= ap_const_lv4_0;
    m_axi_output_r_AWREGION <= ap_const_lv4_0;
    m_axi_output_r_AWSIZE <= ap_const_lv3_0;
    m_axi_output_r_AWUSER <= ap_const_lv1_0;

    -- m_axi_output_r_AWVALID assign process. --
    m_axi_output_r_AWVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_m_axi_output_r_AWREADY)
    begin
        if ((((ap_ST_st43_fsm_42 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_AWREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_AWREADY) and (ap_ST_st66_fsm_65 = ap_CS_fsm)))) then 
            m_axi_output_r_AWVALID <= ap_const_logic_1;
        else 
            m_axi_output_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_output_r_BREADY assign process. --
    m_axi_output_r_BREADY_assign_proc : process(ap_CS_fsm, m_axi_output_r_BVALID)
    begin
        if ((((ap_ST_st46_fsm_45 = ap_CS_fsm) and not((m_axi_output_r_BVALID = ap_const_logic_0))) or (not((m_axi_output_r_BVALID = ap_const_logic_0)) and (ap_ST_st69_fsm_68 = ap_CS_fsm)))) then 
            m_axi_output_r_BREADY <= ap_const_logic_1;
        else 
            m_axi_output_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_output_r_RREADY assign process. --
    m_axi_output_r_RREADY_assign_proc : process(ap_CS_fsm, m_axi_output_r_RVALID)
    begin
        if (((ap_ST_st53_fsm_52 = ap_CS_fsm) and not((m_axi_output_r_RVALID = ap_const_logic_0)))) then 
            m_axi_output_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_output_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    -- m_axi_output_r_WDATA assign process. --
    m_axi_output_r_WDATA_assign_proc : process(ap_CS_fsm, reg_226, result_0_i_reg_145, ap_reg_ioackin_m_axi_output_r_WREADY)
    begin
        if ((ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_WREADY)) then
            if ((ap_ST_st66_fsm_65 = ap_CS_fsm)) then 
                m_axi_output_r_WDATA <= reg_226;
            elsif ((ap_ST_st43_fsm_42 = ap_CS_fsm)) then 
                m_axi_output_r_WDATA <= result_0_i_reg_145;
            else 
                m_axi_output_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            m_axi_output_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    m_axi_output_r_WID <= ap_const_lv1_0;
    m_axi_output_r_WLAST <= ap_const_logic_0;
    m_axi_output_r_WSTRB <= ap_const_lv4_F;
    m_axi_output_r_WUSER <= ap_const_lv1_0;

    -- m_axi_output_r_WVALID assign process. --
    m_axi_output_r_WVALID_assign_proc : process(ap_CS_fsm, ap_reg_ioackin_m_axi_output_r_WREADY)
    begin
        if ((((ap_ST_st43_fsm_42 = ap_CS_fsm) and (ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_WREADY)) or ((ap_const_logic_0 = ap_reg_ioackin_m_axi_output_r_WREADY) and (ap_ST_st66_fsm_65 = ap_CS_fsm)))) then 
            m_axi_output_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_output_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    max_val_1_fu_249_p3 <= 
        max_val_2_reg_371 when (grp_fu_214_p2(0) = '1') else 
        max_val1_reg_111;

    -- neural_network_softmax_ap_rst assign process. --
    neural_network_softmax_ap_rst_assign_proc : process(ap_rst_n)
    begin
                neural_network_softmax_ap_rst <= not(ap_rst_n);
    end process;

    sext3_cast_fu_328_p1 <= std_logic_vector(resize(unsigned(output3),33));
    sext_cast_fu_294_p1 <= std_logic_vector(resize(unsigned(output3),33));
    sum1_cast_fu_302_p1 <= std_logic_vector(resize(unsigned(sum1_fu_297_p2),64));
    sum1_fu_297_p2 <= std_logic_vector(unsigned(sext_cast_fu_294_p1) + unsigned(tmp_6_cast_reg_395));
    sum4_cast_fu_337_p1 <= std_logic_vector(resize(unsigned(sum4_fu_331_p2),64));
    sum4_fu_331_p2 <= std_logic_vector(unsigned(sext3_cast_fu_328_p1) + unsigned(tmp_8_cast_fu_324_p1));
    tmp_6_cast_fu_273_p1 <= std_logic_vector(resize(unsigned(i1_reg_133),33));
    tmp_6_fu_268_p1 <= std_logic_vector(resize(unsigned(i1_reg_133),64));
    tmp_8_cast_fu_324_p1 <= std_logic_vector(resize(unsigned(i2_reg_181),33));
    tmp_fu_238_p1 <= std_logic_vector(resize(unsigned(i_reg_100),64));
end behav;
